// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.052.001.02
package camt_052_001_02

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".BkToCstmrAcctRpt", v.BkToCstmrAcctRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice"
	if v.IBAN != nil {
		fedwire.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountInterest2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountInterest2"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		for indx := range v.Rate {
			fedwire.AddError(&errs, baseName+".Rate", v.Rate[indx].Validate())
		}
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountReport11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountReport11"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.ElctrncSeqNb != nil {
		fedwire.AddError(&errs, baseName+".ElctrncSeqNb", v.ElctrncSeqNb.Validate())
	}
	if v.LglSeqNb != nil {
		fedwire.AddError(&errs, baseName+".LglSeqNb", v.LglSeqNb.Validate())
	}
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if v.CpyDplctInd != nil {
		fedwire.AddError(&errs, baseName+".CpyDplctInd", v.CpyDplctInd.Validate())
	}
	if v.RptgSrc != nil {
		fedwire.AddError(&errs, baseName+".RptgSrc", v.RptgSrc.Validate())
	}
	fedwire.AddError(&errs, baseName+".Acct", v.Acct.Validate())
	if v.RltdAcct != nil {
		fedwire.AddError(&errs, baseName+".RltdAcct", v.RltdAcct.Validate())
	}
	if v.Intrst != nil {
		for indx := range v.Intrst {
			fedwire.AddError(&errs, baseName+".Intrst", v.Intrst[indx].Validate())
		}
	}
	if v.Bal != nil {
		for indx := range v.Bal {
			fedwire.AddError(&errs, baseName+".Bal", v.Bal[indx].Validate())
		}
	}
	if v.TxsSummry != nil {
		fedwire.AddError(&errs, baseName+".TxsSummry", v.TxsSummry.Validate())
	}
	if v.Ntry != nil {
		for indx := range v.Ntry {
			fedwire.AddError(&errs, baseName+".Ntry", v.Ntry[indx].Validate())
		}
	}
	if v.AddtlRptInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlRptInf", v.AddtlRptInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AlternateSecurityIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AlternateSecurityIdentification2"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndCurrencyExchange3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndCurrencyExchange3"
	if v.InstdAmt != nil {
		fedwire.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	}
	if v.TxAmt != nil {
		fedwire.AddError(&errs, baseName+".TxAmt", v.TxAmt.Validate())
	}
	if v.CntrValAmt != nil {
		fedwire.AddError(&errs, baseName+".CntrValAmt", v.CntrValAmt.Validate())
	}
	if v.AnncdPstngAmt != nil {
		fedwire.AddError(&errs, baseName+".AnncdPstngAmt", v.AnncdPstngAmt.Validate())
	}
	if v.PrtryAmt != nil {
		for indx := range v.PrtryAmt {
			fedwire.AddError(&errs, baseName+".PrtryAmt", v.PrtryAmt[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndCurrencyExchangeDetails3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndCurrencyExchangeDetails3"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CcyXchg != nil {
		fedwire.AddError(&errs, baseName+".CcyXchg", v.CcyXchg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndCurrencyExchangeDetails4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndCurrencyExchangeDetails4"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CcyXchg != nil {
		fedwire.AddError(&errs, baseName+".CcyXchg", v.CcyXchg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountRangeBoundary1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountRangeBoundary1"
	fedwire.AddError(&errs, baseName+".BdryAmt", v.BdryAmt.Validate())
	fedwire.AddError(&errs, baseName+".Incl", v.Incl.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BalanceSubType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BalanceSubType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BalanceType12) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BalanceType12"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.SubTp != nil {
		fedwire.AddError(&errs, baseName+".SubTp", v.SubTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BalanceType5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BalanceType5Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankToCustomerAccountReportV02) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankToCustomerAccountReportV02"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	for indx := range v.Rpt {
		fedwire.AddError(&errs, baseName+".Rpt", v.Rpt[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure4"
	if v.Domn != nil {
		fedwire.AddError(&errs, baseName+".Domn", v.Domn.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure5"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	fedwire.AddError(&errs, baseName+".Fmly", v.Fmly.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure6"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	fedwire.AddError(&errs, baseName+".SubFmlyCd", v.SubFmlyCd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BatchInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BatchInformation2"
	if v.MsgId != nil {
		fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	}
	if v.PmtInfId != nil {
		fedwire.AddError(&errs, baseName+".PmtInfId", v.PmtInfId.Validate())
	}
	if v.NbOfTxs != nil {
		fedwire.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	}
	if v.TtlAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification4"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		fedwire.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData2"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount16"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount20) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount20"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.Ownr != nil {
		fedwire.AddError(&errs, baseName+".Ownr", v.Ownr.Validate())
	}
	if v.Svcr != nil {
		fedwire.AddError(&errs, baseName+".Svcr", v.Svcr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashBalance3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashBalance3"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.CdtLine != nil {
		fedwire.AddError(&errs, baseName+".CdtLine", v.CdtLine.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashBalanceAvailability2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashBalanceAvailability2"
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashBalanceAvailabilityDate1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashBalanceAvailabilityDate1"
	if v.NbOfDays != nil {
		fedwire.AddError(&errs, baseName+".NbOfDays", v.NbOfDays.Validate())
	}
	if v.ActlDt != nil {
		fedwire.AddError(&errs, baseName+".ActlDt", v.ActlDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargeType2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargeType2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargesInformation6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargesInformation6"
	if v.TtlChrgsAndTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlChrgsAndTaxAmt", v.TtlChrgsAndTaxAmt.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Br != nil {
		fedwire.AddError(&errs, baseName+".Br", v.Br.Validate())
	}
	if v.Pty != nil {
		fedwire.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	if v.ClrSysId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	}
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ContactDetails2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ContactDetails2"
	if v.NmPrfx != nil {
		fedwire.AddError(&errs, baseName+".NmPrfx", v.NmPrfx.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PhneNb != nil {
		fedwire.AddError(&errs, baseName+".PhneNb", v.PhneNb.Validate())
	}
	if v.MobNb != nil {
		fedwire.AddError(&errs, baseName+".MobNb", v.MobNb.Validate())
	}
	if v.FaxNb != nil {
		fedwire.AddError(&errs, baseName+".FaxNb", v.FaxNb.Validate())
	}
	if v.EmailAdr != nil {
		fedwire.AddError(&errs, baseName+".EmailAdr", v.EmailAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CorporateAction1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CorporateAction1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditLine2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditLine2"
	fedwire.AddError(&errs, baseName+".Incl", v.Incl.Validate())
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation2"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ref != nil {
		fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType2"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CurrencyAndAmountRange2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CurrencyAndAmountRange2"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CurrencyExchange5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CurrencyExchange5"
	fedwire.AddError(&errs, baseName+".SrcCcy", v.SrcCcy.Validate())
	if v.TrgtCcy != nil {
		fedwire.AddError(&errs, baseName+".TrgtCcy", v.TrgtCcy.Validate())
	}
	if v.UnitCcy != nil {
		fedwire.AddError(&errs, baseName+".UnitCcy", v.UnitCcy.Validate())
	}
	fedwire.AddError(&errs, baseName+".XchgRate", v.XchgRate.Validate())
	if v.CtrctId != nil {
		fedwire.AddError(&errs, baseName+".CtrctId", v.CtrctId.Validate())
	}
	if v.QtnDt != nil {
		fedwire.AddError(&errs, baseName+".QtnDt", v.QtnDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTimeChoice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTimeChoice"
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.DtTm != nil {
		fedwire.AddError(&errs, baseName+".DtTm", v.DtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth"
	fedwire.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fedwire.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fedwire.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatePeriodDetails) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatePeriodDetails"
	fedwire.AddError(&errs, baseName+".FrDt", v.FrDt.Validate())
	fedwire.AddError(&errs, baseName+".ToDt", v.ToDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateTimePeriodDetails) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateTimePeriodDetails"
	fedwire.AddError(&errs, baseName+".FrDtTm", v.FrDtTm.Validate())
	fedwire.AddError(&errs, baseName+".ToDtTm", v.ToDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentAdjustment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentAdjustment1"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryDetails1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryDetails1"
	if v.Btch != nil {
		fedwire.AddError(&errs, baseName+".Btch", v.Btch.Validate())
	}
	if v.TxDtls != nil {
		for indx := range v.TxDtls {
			fedwire.AddError(&errs, baseName+".TxDtls", v.TxDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryTransaction2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryTransaction2"
	if v.Refs != nil {
		fedwire.AddError(&errs, baseName+".Refs", v.Refs.Validate())
	}
	if v.AmtDtls != nil {
		fedwire.AddError(&errs, baseName+".AmtDtls", v.AmtDtls.Validate())
	}
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	if v.BkTxCd != nil {
		fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	}
	if v.Chrgs != nil {
		for indx := range v.Chrgs {
			fedwire.AddError(&errs, baseName+".Chrgs", v.Chrgs[indx].Validate())
		}
	}
	if v.Intrst != nil {
		for indx := range v.Intrst {
			fedwire.AddError(&errs, baseName+".Intrst", v.Intrst[indx].Validate())
		}
	}
	if v.RltdPties != nil {
		fedwire.AddError(&errs, baseName+".RltdPties", v.RltdPties.Validate())
	}
	if v.RltdAgts != nil {
		fedwire.AddError(&errs, baseName+".RltdAgts", v.RltdAgts.Validate())
	}
	if v.Purp != nil {
		fedwire.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if v.RltdRmtInf != nil {
		for indx := range v.RltdRmtInf {
			fedwire.AddError(&errs, baseName+".RltdRmtInf", v.RltdRmtInf[indx].Validate())
		}
	}
	if v.RmtInf != nil {
		fedwire.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if v.RltdDts != nil {
		fedwire.AddError(&errs, baseName+".RltdDts", v.RltdDts.Validate())
	}
	if v.RltdPric != nil {
		fedwire.AddError(&errs, baseName+".RltdPric", v.RltdPric.Validate())
	}
	if v.RltdQties != nil {
		for indx := range v.RltdQties {
			fedwire.AddError(&errs, baseName+".RltdQties", v.RltdQties[indx].Validate())
		}
	}
	if v.FinInstrmId != nil {
		fedwire.AddError(&errs, baseName+".FinInstrmId", v.FinInstrmId.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if v.RtrInf != nil {
		fedwire.AddError(&errs, baseName+".RtrInf", v.RtrInf.Validate())
	}
	if v.CorpActn != nil {
		fedwire.AddError(&errs, baseName+".CorpActn", v.CorpActn.Validate())
	}
	if v.SfkpgAcct != nil {
		fedwire.AddError(&errs, baseName+".SfkpgAcct", v.SfkpgAcct.Validate())
	}
	if v.AddtlTxInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlTxInf", v.AddtlTxInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification7"
	if v.BIC != nil {
		fedwire.AddError(&errs, baseName+".BIC", v.BIC.Validate())
	}
	if v.ClrSysMmbId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstrumentQuantityChoice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstrumentQuantityChoice"
	if v.Unit != nil {
		fedwire.AddError(&errs, baseName+".Unit", v.Unit.Validate())
	}
	if v.FaceAmt != nil {
		fedwire.AddError(&errs, baseName+".FaceAmt", v.FaceAmt.Validate())
	}
	if v.AmtsdVal != nil {
		fedwire.AddError(&errs, baseName+".AmtsdVal", v.AmtsdVal.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FromToAmountRange) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FromToAmountRange"
	fedwire.AddError(&errs, baseName+".FrAmt", v.FrAmt.Validate())
	fedwire.AddError(&errs, baseName+".ToAmt", v.ToAmt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericFinancialIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericFinancialIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification3"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader42) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader42"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if v.MsgRcpt != nil {
		fedwire.AddError(&errs, baseName+".MsgRcpt", v.MsgRcpt.Validate())
	}
	if v.MsgPgntn != nil {
		fedwire.AddError(&errs, baseName+".MsgPgntn", v.MsgPgntn.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ImpliedCurrencyAmountRangeChoice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ImpliedCurrencyAmountRangeChoice"
	if v.FrAmt != nil {
		fedwire.AddError(&errs, baseName+".FrAmt", v.FrAmt.Validate())
	}
	if v.ToAmt != nil {
		fedwire.AddError(&errs, baseName+".ToAmt", v.ToAmt.Validate())
	}
	if v.FrToAmt != nil {
		fedwire.AddError(&errs, baseName+".FrToAmt", v.FrToAmt.Validate())
	}
	if v.EQAmt != nil {
		fedwire.AddError(&errs, baseName+".EQAmt", v.EQAmt.Validate())
	}
	if v.NEQAmt != nil {
		fedwire.AddError(&errs, baseName+".NEQAmt", v.NEQAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InterestType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InterestType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageIdentification2"
	if v.MsgNmId != nil {
		fedwire.AddError(&errs, baseName+".MsgNmId", v.MsgNmId.Validate())
	}
	if v.MsgId != nil {
		fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress10) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress10"
	fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	fedwire.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions1"
	if v.NbOfNtries != nil {
		fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	}
	if v.Sum != nil {
		fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions2"
	if v.NbOfNtries != nil {
		fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	}
	if v.Sum != nil {
		fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	}
	if v.TtlNetNtryAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlNetNtryAmt", v.TtlNetNtryAmt.Validate())
	}
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification4"
	if v.BICOrBEI != nil {
		fedwire.AddError(&errs, baseName+".BICOrBEI", v.BICOrBEI.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Pagination) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Pagination"
	fedwire.AddError(&errs, baseName+".PgNb", v.PgNb.Validate())
	fedwire.AddError(&errs, baseName+".LastPgInd", v.LastPgInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party6Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party6Choice"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fedwire.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification32) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification32"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if v.CtctDtls != nil {
		fedwire.AddError(&errs, baseName+".CtctDtls", v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification5"
	if v.DtAndPlcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress6"
	if v.AdrTp != nil {
		fedwire.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fedwire.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryAgent2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryAgent2"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryBankTransactionCodeStructure1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryBankTransactionCodeStructure1"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryDate2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryDate2"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryParty2"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryPrice2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryPrice2"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Pric", v.Pric.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryQuantity1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryQuantity1"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Qty", v.Qty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryReference1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryReference1"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Rate3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Rate3"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.VldtyRg != nil {
		fedwire.AddError(&errs, baseName+".VldtyRg", v.VldtyRg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RateType4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RateType4Choice"
	if v.Pctg != nil {
		fedwire.AddError(&errs, baseName+".Pctg", v.Pctg.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation3"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fedwire.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType2"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount1"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt.Validate())
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fedwire.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation5"
	if v.Ustrd != nil {
		for indx := range v.Ustrd {
			fedwire.AddError(&errs, baseName+".Ustrd", v.Ustrd[indx].Validate())
		}
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			fedwire.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocation2"
	if v.RmtId != nil {
		fedwire.AddError(&errs, baseName+".RmtId", v.RmtId.Validate())
	}
	if v.RmtLctnMtd != nil {
		fedwire.AddError(&errs, baseName+".RmtLctnMtd", v.RmtLctnMtd.Validate())
	}
	if v.RmtLctnElctrncAdr != nil {
		fedwire.AddError(&errs, baseName+".RmtLctnElctrncAdr", v.RmtLctnElctrncAdr.Validate())
	}
	if v.RmtLctnPstlAdr != nil {
		fedwire.AddError(&errs, baseName+".RmtLctnPstlAdr", v.RmtLctnPstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportEntry2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportEntry2"
	if v.NtryRef != nil {
		fedwire.AddError(&errs, baseName+".NtryRef", v.NtryRef.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if v.RvslInd != nil {
		fedwire.AddError(&errs, baseName+".RvslInd", v.RvslInd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	if v.BookgDt != nil {
		fedwire.AddError(&errs, baseName+".BookgDt", v.BookgDt.Validate())
	}
	if v.ValDt != nil {
		fedwire.AddError(&errs, baseName+".ValDt", v.ValDt.Validate())
	}
	if v.AcctSvcrRef != nil {
		fedwire.AddError(&errs, baseName+".AcctSvcrRef", v.AcctSvcrRef.Validate())
	}
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	if v.ComssnWvrInd != nil {
		fedwire.AddError(&errs, baseName+".ComssnWvrInd", v.ComssnWvrInd.Validate())
	}
	if v.AddtlInfInd != nil {
		fedwire.AddError(&errs, baseName+".AddtlInfInd", v.AddtlInfInd.Validate())
	}
	if v.AmtDtls != nil {
		fedwire.AddError(&errs, baseName+".AmtDtls", v.AmtDtls.Validate())
	}
	if v.Chrgs != nil {
		for indx := range v.Chrgs {
			fedwire.AddError(&errs, baseName+".Chrgs", v.Chrgs[indx].Validate())
		}
	}
	if v.TechInptChanl != nil {
		fedwire.AddError(&errs, baseName+".TechInptChanl", v.TechInptChanl.Validate())
	}
	if v.Intrst != nil {
		for indx := range v.Intrst {
			fedwire.AddError(&errs, baseName+".Intrst", v.Intrst[indx].Validate())
		}
	}
	if v.NtryDtls != nil {
		for indx := range v.NtryDtls {
			fedwire.AddError(&errs, baseName+".NtryDtls", v.NtryDtls[indx].Validate())
		}
	}
	if v.AddtlNtryInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlNtryInf", v.AddtlNtryInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportingSource1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportingSource1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReturnReason5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReturnReason5Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReturnReasonInformation10) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReturnReasonInformation10"
	if v.OrgnlBkTxCd != nil {
		fedwire.AddError(&errs, baseName+".OrgnlBkTxCd", v.OrgnlBkTxCd.Validate())
	}
	if v.Orgtr != nil {
		fedwire.AddError(&errs, baseName+".Orgtr", v.Orgtr.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		for indx := range v.AddtlInf {
			fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SecurityIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SecurityIdentification4Choice"
	if v.ISIN != nil {
		fedwire.AddError(&errs, baseName+".ISIN", v.ISIN.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation7"
	if v.RfrdDocInf != nil {
		for indx := range v.RfrdDocInf {
			fedwire.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf[indx].Validate())
		}
	}
	if v.RfrdDocAmt != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt.Validate())
	}
	if v.CdtrRefInf != nil {
		fedwire.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		fedwire.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		fedwire.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.AddtlRmtInf != nil {
		for indx := range v.AddtlRmtInf {
			fedwire.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmount1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmount1"
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.TaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxblBaseAmt", v.TaxblBaseAmt.Validate())
	}
	if v.TtlAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.Dtls != nil {
		for indx := range v.Dtls {
			fedwire.AddError(&errs, baseName+".Dtls", v.Dtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAuthorisation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAuthorisation1"
	if v.Titl != nil {
		fedwire.AddError(&errs, baseName+".Titl", v.Titl.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxCharges2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxCharges2"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxInformation3"
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.AdmstnZn != nil {
		fedwire.AddError(&errs, baseName+".AdmstnZn", v.AdmstnZn.Validate())
	}
	if v.RefNb != nil {
		fedwire.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		fedwire.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		fedwire.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fedwire.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty1"
	if v.TaxId != nil {
		fedwire.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fedwire.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty2"
	if v.TaxId != nil {
		fedwire.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fedwire.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if v.Authstn != nil {
		fedwire.AddError(&errs, baseName+".Authstn", v.Authstn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxPeriod1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxPeriod1"
	if v.Yr != nil {
		fedwire.AddError(&errs, baseName+".Yr", v.Yr.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecord1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecord1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ctgy != nil {
		fedwire.AddError(&errs, baseName+".Ctgy", v.Ctgy.Validate())
	}
	if v.CtgyDtls != nil {
		fedwire.AddError(&errs, baseName+".CtgyDtls", v.CtgyDtls.Validate())
	}
	if v.DbtrSts != nil {
		fedwire.AddError(&errs, baseName+".DbtrSts", v.DbtrSts.Validate())
	}
	if v.CertId != nil {
		fedwire.AddError(&errs, baseName+".CertId", v.CertId.Validate())
	}
	if v.FrmsCd != nil {
		fedwire.AddError(&errs, baseName+".FrmsCd", v.FrmsCd.Validate())
	}
	if v.Prd != nil {
		fedwire.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	if v.TaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecordDetails1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecordDetails1"
	if v.Prd != nil {
		fedwire.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TechnicalInputChannel1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TechnicalInputChannel1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalTransactions2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalTransactions2"
	if v.TtlNtries != nil {
		fedwire.AddError(&errs, baseName+".TtlNtries", v.TtlNtries.Validate())
	}
	if v.TtlCdtNtries != nil {
		fedwire.AddError(&errs, baseName+".TtlCdtNtries", v.TtlCdtNtries.Validate())
	}
	if v.TtlDbtNtries != nil {
		fedwire.AddError(&errs, baseName+".TtlDbtNtries", v.TtlDbtNtries.Validate())
	}
	if v.TtlNtriesPerBkTxCd != nil {
		for indx := range v.TtlNtriesPerBkTxCd {
			fedwire.AddError(&errs, baseName+".TtlNtriesPerBkTxCd", v.TtlNtriesPerBkTxCd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalsPerBankTransactionCode2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalsPerBankTransactionCode2"
	if v.NbOfNtries != nil {
		fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	}
	if v.Sum != nil {
		fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	}
	if v.TtlNetNtryAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlNetNtryAmt", v.TtlNetNtryAmt.Validate())
	}
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.FcstInd != nil {
		fedwire.AddError(&errs, baseName+".FcstInd", v.FcstInd.Validate())
	}
	fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionAgents2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionAgents2"
	if v.DbtrAgt != nil {
		fedwire.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	}
	if v.CdtrAgt != nil {
		fedwire.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	}
	if v.IntrmyAgt1 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt1", v.IntrmyAgt1.Validate())
	}
	if v.IntrmyAgt2 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt2", v.IntrmyAgt2.Validate())
	}
	if v.IntrmyAgt3 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt3", v.IntrmyAgt3.Validate())
	}
	if v.RcvgAgt != nil {
		fedwire.AddError(&errs, baseName+".RcvgAgt", v.RcvgAgt.Validate())
	}
	if v.DlvrgAgt != nil {
		fedwire.AddError(&errs, baseName+".DlvrgAgt", v.DlvrgAgt.Validate())
	}
	if v.IssgAgt != nil {
		fedwire.AddError(&errs, baseName+".IssgAgt", v.IssgAgt.Validate())
	}
	if v.SttlmPlc != nil {
		fedwire.AddError(&errs, baseName+".SttlmPlc", v.SttlmPlc.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionDates2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionDates2"
	if v.AccptncDtTm != nil {
		fedwire.AddError(&errs, baseName+".AccptncDtTm", v.AccptncDtTm.Validate())
	}
	if v.TradActvtyCtrctlSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".TradActvtyCtrctlSttlmDt", v.TradActvtyCtrctlSttlmDt.Validate())
	}
	if v.TradDt != nil {
		fedwire.AddError(&errs, baseName+".TradDt", v.TradDt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.StartDt != nil {
		fedwire.AddError(&errs, baseName+".StartDt", v.StartDt.Validate())
	}
	if v.EndDt != nil {
		fedwire.AddError(&errs, baseName+".EndDt", v.EndDt.Validate())
	}
	if v.TxDtTm != nil {
		fedwire.AddError(&errs, baseName+".TxDtTm", v.TxDtTm.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionInterest2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionInterest2"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		for indx := range v.Rate {
			fedwire.AddError(&errs, baseName+".Rate", v.Rate[indx].Validate())
		}
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionParty2"
	if v.InitgPty != nil {
		fedwire.AddError(&errs, baseName+".InitgPty", v.InitgPty.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.DbtrAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.CdtrAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	}
	if v.UltmtCdtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if v.TradgPty != nil {
		fedwire.AddError(&errs, baseName+".TradgPty", v.TradgPty.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionPrice2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionPrice2Choice"
	if v.DealPric != nil {
		fedwire.AddError(&errs, baseName+".DealPric", v.DealPric.Validate())
	}
	for indx := range v.Prtry {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionQuantities1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionQuantities1Choice"
	if v.Qty != nil {
		fedwire.AddError(&errs, baseName+".Qty", v.Qty.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionReferences2"
	if v.MsgId != nil {
		fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	}
	if v.AcctSvcrRef != nil {
		fedwire.AddError(&errs, baseName+".AcctSvcrRef", v.AcctSvcrRef.Validate())
	}
	if v.PmtInfId != nil {
		fedwire.AddError(&errs, baseName+".PmtInfId", v.PmtInfId.Validate())
	}
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	if v.EndToEndId != nil {
		fedwire.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	}
	if v.TxId != nil {
		fedwire.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	if v.MndtId != nil {
		fedwire.AddError(&errs, baseName+".MndtId", v.MndtId.Validate())
	}
	if v.ChqNb != nil {
		fedwire.AddError(&errs, baseName+".ChqNb", v.ChqNb.Validate())
	}
	if v.ClrSysRef != nil {
		fedwire.AddError(&errs, baseName+".ClrSysRef", v.ClrSysRef.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v AddressType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BalanceType12Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "XPCD", "OPAV", "ITAV", "CLAV", "FWAV", "CLBD", "ITBD", "OPBD", "PRCD", "INFO"); err != nil {
		return err
	}
	return nil
}

func (v BaseOneRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v CashAccountType4Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CASH", "CHAR", "COMM", "TAXE", "CISH", "TRAS", "SACC", "CACC", "SVGS", "ONDP", "MGLD", "NREX", "MOMA", "LOAN", "SLRY", "ODFT"); err != nil {
		return err
	}
	return nil
}

func (v ChargeBearerType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DEBT", "CRED", "SHAR", "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v ChargeType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "BRKF", "COMM"); err != nil {
		return err
	}
	return nil
}

func (v CopyDuplicate1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CODU", "COPY", "DUPL"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType5Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP", "BOLD", "VCHR", "AROI", "TSUT"); err != nil {
		return err
	}
	return nil
}

func (v EntryStatus2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "BOOK", "PDNG", "INFO"); err != nil {
		return err
	}
	return nil
}

func (v ExternalAccountIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBalanceSubType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBankTransactionDomain1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBankTransactionFamily1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBankTransactionSubFamily1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 5); err != nil {
		return err
	}
	return nil
}

func (v ExternalFinancialInstitutionIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalReportingSource1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalReturnReason1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalTechnicalInputChannel1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IBAN2007Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v ISINIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{12,12}`); err != nil {
		return err
	}
	return nil
}

func (v ImpliedCurrencyAndAmount) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 5); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v InterestType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "INDY", "OVRN"); err != nil {
		return err
	}
	return nil
}

func (v Max105Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 105); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max15PlusSignedNumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[+]{0,1}[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max500Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 500); err != nil {
		return err
	}
	return nil
}

func (v Max5NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,5}`); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v NamePrefix1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DOCT", "MIST", "MISS", "MADM"); err != nil {
		return err
	}
	return nil
}

func (v Number) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v PercentageRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v PhoneNumber) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v RemittanceLocationMethod2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "FAXI", "EDIC", "URID", "EMAL", "POST", "SMSM"); err != nil {
		return err
	}
	return nil
}

func (v TaxRecordPeriod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MM01", "MM02", "MM03", "MM04", "MM05", "MM06", "MM07", "MM08", "MM09", "MM10", "MM11", "MM12", "QTR1", "QTR2", "QTR3", "QTR4", "HLF1", "HLF2"); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}

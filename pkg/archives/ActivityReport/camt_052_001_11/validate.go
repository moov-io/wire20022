// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.052.001.11
package camt_052_001_11

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".BkToCstmrAcctRpt", v.BkToCstmrAcctRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice"
	if v.IBAN != nil {
		fedwire.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountInterest4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountInterest4"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		for indx := range v.Rate {
			fedwire.AddError(&errs, baseName+".Rate", v.Rate[indx].Validate())
		}
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountReport32) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountReport32"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.RptPgntn != nil {
		fedwire.AddError(&errs, baseName+".RptPgntn", v.RptPgntn.Validate())
	}
	if v.ElctrncSeqNb != nil {
		fedwire.AddError(&errs, baseName+".ElctrncSeqNb", v.ElctrncSeqNb.Validate())
	}
	if v.RptgSeq != nil {
		fedwire.AddError(&errs, baseName+".RptgSeq", v.RptgSeq.Validate())
	}
	if v.LglSeqNb != nil {
		fedwire.AddError(&errs, baseName+".LglSeqNb", v.LglSeqNb.Validate())
	}
	if v.CreDtTm != nil {
		fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if v.CpyDplctInd != nil {
		fedwire.AddError(&errs, baseName+".CpyDplctInd", v.CpyDplctInd.Validate())
	}
	if v.RptgSrc != nil {
		fedwire.AddError(&errs, baseName+".RptgSrc", v.RptgSrc.Validate())
	}
	fedwire.AddError(&errs, baseName+".Acct", v.Acct.Validate())
	if v.RltdAcct != nil {
		fedwire.AddError(&errs, baseName+".RltdAcct", v.RltdAcct.Validate())
	}
	if v.Intrst != nil {
		for indx := range v.Intrst {
			fedwire.AddError(&errs, baseName+".Intrst", v.Intrst[indx].Validate())
		}
	}
	if v.Bal != nil {
		for indx := range v.Bal {
			fedwire.AddError(&errs, baseName+".Bal", v.Bal[indx].Validate())
		}
	}
	if v.TxsSummry != nil {
		fedwire.AddError(&errs, baseName+".TxsSummry", v.TxsSummry.Validate())
	}
	if v.Ntry != nil {
		for indx := range v.Ntry {
			fedwire.AddError(&errs, baseName+".Ntry", v.Ntry[indx].Validate())
		}
	}
	if v.AddtlRptInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlRptInf", v.AddtlRptInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAnd13DecimalAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAnd13DecimalAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmountRange2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmountRange2"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AddressType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AddressType3Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndCurrencyExchange4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndCurrencyExchange4"
	if v.InstdAmt != nil {
		fedwire.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	}
	if v.TxAmt != nil {
		fedwire.AddError(&errs, baseName+".TxAmt", v.TxAmt.Validate())
	}
	if v.CntrValAmt != nil {
		fedwire.AddError(&errs, baseName+".CntrValAmt", v.CntrValAmt.Validate())
	}
	if v.AnncdPstngAmt != nil {
		fedwire.AddError(&errs, baseName+".AnncdPstngAmt", v.AnncdPstngAmt.Validate())
	}
	if v.PrtryAmt != nil {
		for indx := range v.PrtryAmt {
			fedwire.AddError(&errs, baseName+".PrtryAmt", v.PrtryAmt[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndCurrencyExchangeDetails5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndCurrencyExchangeDetails5"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CcyXchg != nil {
		fedwire.AddError(&errs, baseName+".CcyXchg", v.CcyXchg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndCurrencyExchangeDetails6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndCurrencyExchangeDetails6"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CcyXchg != nil {
		fedwire.AddError(&errs, baseName+".CcyXchg", v.CcyXchg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountAndDirection35) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountAndDirection35"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountRangeBoundary1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountRangeBoundary1"
	fedwire.AddError(&errs, baseName+".BdryAmt", v.BdryAmt.Validate())
	fedwire.AddError(&errs, baseName+".Incl", v.Incl.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BalanceSubType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BalanceSubType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BalanceType10Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BalanceType10Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BalanceType13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BalanceType13"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.SubTp != nil {
		fedwire.AddError(&errs, baseName+".SubTp", v.SubTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankToCustomerAccountReportV11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankToCustomerAccountReportV11"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	for indx := range v.Rpt {
		fedwire.AddError(&errs, baseName+".Rpt", v.Rpt[indx].Validate())
	}
	if v.SplmtryData != nil {
		for indx := range v.SplmtryData {
			fedwire.AddError(&errs, baseName+".SplmtryData", v.SplmtryData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure4"
	if v.Domn != nil {
		fedwire.AddError(&errs, baseName+".Domn", v.Domn.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure5"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	fedwire.AddError(&errs, baseName+".Fmly", v.Fmly.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure6"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	fedwire.AddError(&errs, baseName+".SubFmlyCd", v.SubFmlyCd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BatchInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BatchInformation2"
	if v.MsgId != nil {
		fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	}
	if v.PmtInfId != nil {
		fedwire.AddError(&errs, baseName+".PmtInfId", v.PmtInfId.Validate())
	}
	if v.NbOfTxs != nil {
		fedwire.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	}
	if v.TtlAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		fedwire.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData3"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.LEI != nil {
		fedwire.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardAggregated2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardAggregated2"
	if v.AddtlSvc != nil {
		fedwire.AddError(&errs, baseName+".AddtlSvc", v.AddtlSvc.Validate())
	}
	if v.TxCtgy != nil {
		fedwire.AddError(&errs, baseName+".TxCtgy", v.TxCtgy.Validate())
	}
	if v.SaleRcncltnId != nil {
		fedwire.AddError(&errs, baseName+".SaleRcncltnId", v.SaleRcncltnId.Validate())
	}
	if v.SeqNbRg != nil {
		fedwire.AddError(&errs, baseName+".SeqNbRg", v.SeqNbRg.Validate())
	}
	if v.TxDtRg != nil {
		fedwire.AddError(&errs, baseName+".TxDtRg", v.TxDtRg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardEntry5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardEntry5"
	if v.Card != nil {
		fedwire.AddError(&errs, baseName+".Card", v.Card.Validate())
	}
	if v.POI != nil {
		fedwire.AddError(&errs, baseName+".POI", v.POI.Validate())
	}
	if v.AggtdNtry != nil {
		fedwire.AddError(&errs, baseName+".AggtdNtry", v.AggtdNtry.Validate())
	}
	if v.PrePdAcct != nil {
		fedwire.AddError(&errs, baseName+".PrePdAcct", v.PrePdAcct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardIndividualTransaction2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardIndividualTransaction2"
	if v.ICCRltdData != nil {
		fedwire.AddError(&errs, baseName+".ICCRltdData", v.ICCRltdData.Validate())
	}
	if v.PmtCntxt != nil {
		fedwire.AddError(&errs, baseName+".PmtCntxt", v.PmtCntxt.Validate())
	}
	if v.AddtlSvc != nil {
		fedwire.AddError(&errs, baseName+".AddtlSvc", v.AddtlSvc.Validate())
	}
	if v.TxCtgy != nil {
		fedwire.AddError(&errs, baseName+".TxCtgy", v.TxCtgy.Validate())
	}
	if v.SaleRcncltnId != nil {
		fedwire.AddError(&errs, baseName+".SaleRcncltnId", v.SaleRcncltnId.Validate())
	}
	if v.SaleRefNb != nil {
		fedwire.AddError(&errs, baseName+".SaleRefNb", v.SaleRefNb.Validate())
	}
	if v.RePresntmntRsn != nil {
		fedwire.AddError(&errs, baseName+".RePresntmntRsn", v.RePresntmntRsn.Validate())
	}
	if v.SeqNb != nil {
		fedwire.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.TxId != nil {
		fedwire.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	if v.Pdct != nil {
		fedwire.AddError(&errs, baseName+".Pdct", v.Pdct.Validate())
	}
	if v.VldtnDt != nil {
		fedwire.AddError(&errs, baseName+".VldtnDt", v.VldtnDt.Validate())
	}
	if v.VldtnSeqNb != nil {
		fedwire.AddError(&errs, baseName+".VldtnSeqNb", v.VldtnSeqNb.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardSecurityInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardSecurityInformation1"
	fedwire.AddError(&errs, baseName+".CSCMgmt", v.CSCMgmt.Validate())
	if v.CSCVal != nil {
		fedwire.AddError(&errs, baseName+".CSCVal", v.CSCVal.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardSequenceNumberRange1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardSequenceNumberRange1"
	if v.FrstTx != nil {
		fedwire.AddError(&errs, baseName+".FrstTx", v.FrstTx.Validate())
	}
	if v.LastTx != nil {
		fedwire.AddError(&errs, baseName+".LastTx", v.LastTx.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardTransaction18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardTransaction18"
	if v.Card != nil {
		fedwire.AddError(&errs, baseName+".Card", v.Card.Validate())
	}
	if v.POI != nil {
		fedwire.AddError(&errs, baseName+".POI", v.POI.Validate())
	}
	if v.Tx != nil {
		fedwire.AddError(&errs, baseName+".Tx", v.Tx.Validate())
	}
	if v.PrePdAcct != nil {
		fedwire.AddError(&errs, baseName+".PrePdAcct", v.PrePdAcct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardTransaction3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardTransaction3Choice"
	if v.Aggtd != nil {
		fedwire.AddError(&errs, baseName+".Aggtd", v.Aggtd.Validate())
	}
	if v.Indv != nil {
		fedwire.AddError(&errs, baseName+".Indv", v.Indv.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CardholderAuthentication2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CardholderAuthentication2"
	fedwire.AddError(&errs, baseName+".AuthntcnMtd", v.AuthntcnMtd.Validate())
	fedwire.AddError(&errs, baseName+".AuthntcnNtty", v.AuthntcnNtty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount40) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount40"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.Prxy != nil {
		fedwire.AddError(&errs, baseName+".Prxy", v.Prxy.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount41) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount41"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.Prxy != nil {
		fedwire.AddError(&errs, baseName+".Prxy", v.Prxy.Validate())
	}
	if v.Ownr != nil {
		fedwire.AddError(&errs, baseName+".Ownr", v.Ownr.Validate())
	}
	if v.Svcr != nil {
		fedwire.AddError(&errs, baseName+".Svcr", v.Svcr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAvailability1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAvailability1"
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAvailabilityDate1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAvailabilityDate1Choice"
	if v.NbOfDays != nil {
		fedwire.AddError(&errs, baseName+".NbOfDays", v.NbOfDays.Validate())
	}
	if v.ActlDt != nil {
		fedwire.AddError(&errs, baseName+".ActlDt", v.ActlDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashBalance8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashBalance8"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.CdtLine != nil {
		for indx := range v.CdtLine {
			fedwire.AddError(&errs, baseName+".CdtLine", v.CdtLine[indx].Validate())
		}
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashDeposit1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashDeposit1"
	fedwire.AddError(&errs, baseName+".NoteDnmtn", v.NoteDnmtn.Validate())
	fedwire.AddError(&errs, baseName+".NbOfNotes", v.NbOfNotes.Validate())
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CategoryPurpose1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CategoryPurpose1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargeType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargeType3Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Charges6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Charges6"
	if v.TtlChrgsAndTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlChrgsAndTaxAmt", v.TtlChrgsAndTaxAmt.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fedwire.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargesRecord3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargesRecord3"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.ChrgInclInd != nil {
		fedwire.AddError(&errs, baseName+".ChrgInclInd", v.ChrgInclInd.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Br != nil {
		fedwire.AddError(&errs, baseName+".Br", v.Br.Validate())
	}
	if v.Agt != nil {
		fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	if v.ClrSysId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	}
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Contact4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Contact4"
	if v.NmPrfx != nil {
		fedwire.AddError(&errs, baseName+".NmPrfx", v.NmPrfx.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PhneNb != nil {
		fedwire.AddError(&errs, baseName+".PhneNb", v.PhneNb.Validate())
	}
	if v.MobNb != nil {
		fedwire.AddError(&errs, baseName+".MobNb", v.MobNb.Validate())
	}
	if v.FaxNb != nil {
		fedwire.AddError(&errs, baseName+".FaxNb", v.FaxNb.Validate())
	}
	if v.EmailAdr != nil {
		fedwire.AddError(&errs, baseName+".EmailAdr", v.EmailAdr.Validate())
	}
	if v.EmailPurp != nil {
		fedwire.AddError(&errs, baseName+".EmailPurp", v.EmailPurp.Validate())
	}
	if v.JobTitl != nil {
		fedwire.AddError(&errs, baseName+".JobTitl", v.JobTitl.Validate())
	}
	if v.Rspnsblty != nil {
		fedwire.AddError(&errs, baseName+".Rspnsblty", v.Rspnsblty.Validate())
	}
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if v.PrefrdMtd != nil {
		fedwire.AddError(&errs, baseName+".PrefrdMtd", v.PrefrdMtd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CorporateAction9) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CorporateAction9"
	fedwire.AddError(&errs, baseName+".EvtTp", v.EvtTp.Validate())
	fedwire.AddError(&errs, baseName+".EvtId", v.EvtId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditLine3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditLine3"
	fedwire.AddError(&errs, baseName+".Incl", v.Incl.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditLineType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditLineType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation2"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ref != nil {
		fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType2"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CurrencyExchange24) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CurrencyExchange24"
	fedwire.AddError(&errs, baseName+".SrcCcy", v.SrcCcy.Validate())
	if v.TrgtCcy != nil {
		fedwire.AddError(&errs, baseName+".TrgtCcy", v.TrgtCcy.Validate())
	}
	if v.UnitCcy != nil {
		fedwire.AddError(&errs, baseName+".UnitCcy", v.UnitCcy.Validate())
	}
	fedwire.AddError(&errs, baseName+".XchgRate", v.XchgRate.Validate())
	if v.CtrctId != nil {
		fedwire.AddError(&errs, baseName+".CtrctId", v.CtrctId.Validate())
	}
	if v.QtnDt != nil {
		fedwire.AddError(&errs, baseName+".QtnDt", v.QtnDt.Validate())
	}
	if v.XchgRateBase != nil {
		fedwire.AddError(&errs, baseName+".XchgRateBase", v.XchgRateBase.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTime2Choice"
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.DtTm != nil {
		fedwire.AddError(&errs, baseName+".DtTm", v.DtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth1"
	fedwire.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fedwire.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fedwire.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateOrDateTimePeriod1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateOrDateTimePeriod1Choice"
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.DtTm != nil {
		fedwire.AddError(&errs, baseName+".DtTm", v.DtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatePeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatePeriod2"
	fedwire.AddError(&errs, baseName+".FrDt", v.FrDt.Validate())
	fedwire.AddError(&errs, baseName+".ToDt", v.ToDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateTimePeriod1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateTimePeriod1"
	fedwire.AddError(&errs, baseName+".FrDtTm", v.FrDtTm.Validate())
	fedwire.AddError(&errs, baseName+".ToDtTm", v.ToDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountAndType1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DisplayCapabilities1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DisplayCapabilities1"
	fedwire.AddError(&errs, baseName+".DispTp", v.DispTp.Validate())
	fedwire.AddError(&errs, baseName+".NbOfLines", v.NbOfLines.Validate())
	fedwire.AddError(&errs, baseName+".LineWidth", v.LineWidth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentAdjustment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentAdjustment1"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineIdentification1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fedwire.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineInformation1"
	for indx := range v.Id {
		fedwire.AddError(&errs, baseName+".Id", v.Id[indx].Validate())
	}
	if v.Desc != nil {
		fedwire.AddError(&errs, baseName+".Desc", v.Desc.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryDetails12) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryDetails12"
	if v.Btch != nil {
		fedwire.AddError(&errs, baseName+".Btch", v.Btch.Validate())
	}
	if v.TxDtls != nil {
		for indx := range v.TxDtls {
			fedwire.AddError(&errs, baseName+".TxDtls", v.TxDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryStatus1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryStatus1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryTransaction13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryTransaction13"
	if v.Refs != nil {
		fedwire.AddError(&errs, baseName+".Refs", v.Refs.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.AmtDtls != nil {
		fedwire.AddError(&errs, baseName+".AmtDtls", v.AmtDtls.Validate())
	}
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	if v.BkTxCd != nil {
		fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	}
	if v.Chrgs != nil {
		fedwire.AddError(&errs, baseName+".Chrgs", v.Chrgs.Validate())
	}
	if v.Intrst != nil {
		fedwire.AddError(&errs, baseName+".Intrst", v.Intrst.Validate())
	}
	if v.RltdPties != nil {
		fedwire.AddError(&errs, baseName+".RltdPties", v.RltdPties.Validate())
	}
	if v.RltdAgts != nil {
		fedwire.AddError(&errs, baseName+".RltdAgts", v.RltdAgts.Validate())
	}
	if v.LclInstrm != nil {
		fedwire.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	if v.PmtTpInf != nil {
		fedwire.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	}
	if v.Purp != nil {
		fedwire.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if v.RltdRmtInf != nil {
		for indx := range v.RltdRmtInf {
			fedwire.AddError(&errs, baseName+".RltdRmtInf", v.RltdRmtInf[indx].Validate())
		}
	}
	if v.RmtInf != nil {
		fedwire.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if v.RltdDts != nil {
		fedwire.AddError(&errs, baseName+".RltdDts", v.RltdDts.Validate())
	}
	if v.RltdPric != nil {
		fedwire.AddError(&errs, baseName+".RltdPric", v.RltdPric.Validate())
	}
	if v.RltdQties != nil {
		for indx := range v.RltdQties {
			fedwire.AddError(&errs, baseName+".RltdQties", v.RltdQties[indx].Validate())
		}
	}
	if v.FinInstrmId != nil {
		fedwire.AddError(&errs, baseName+".FinInstrmId", v.FinInstrmId.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if v.RtrInf != nil {
		fedwire.AddError(&errs, baseName+".RtrInf", v.RtrInf.Validate())
	}
	if v.CorpActn != nil {
		fedwire.AddError(&errs, baseName+".CorpActn", v.CorpActn.Validate())
	}
	if v.SfkpgAcct != nil {
		fedwire.AddError(&errs, baseName+".SfkpgAcct", v.SfkpgAcct.Validate())
	}
	if v.CshDpst != nil {
		for indx := range v.CshDpst {
			fedwire.AddError(&errs, baseName+".CshDpst", v.CshDpst[indx].Validate())
		}
	}
	if v.CardTx != nil {
		fedwire.AddError(&errs, baseName+".CardTx", v.CardTx.Validate())
	}
	if v.AddtlTxInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlTxInf", v.AddtlTxInf.Validate())
	}
	if v.SplmtryData != nil {
		for indx := range v.SplmtryData {
			fedwire.AddError(&errs, baseName+".SplmtryData", v.SplmtryData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18"
	if v.BICFI != nil {
		fedwire.AddError(&errs, baseName+".BICFI", v.BICFI.Validate())
	}
	if v.ClrSysMmbId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.LEI != nil {
		fedwire.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstrumentQuantity1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstrumentQuantity1Choice"
	if v.Unit != nil {
		fedwire.AddError(&errs, baseName+".Unit", v.Unit.Validate())
	}
	if v.FaceAmt != nil {
		fedwire.AddError(&errs, baseName+".FaceAmt", v.FaceAmt.Validate())
	}
	if v.AmtsdVal != nil {
		fedwire.AddError(&errs, baseName+".AmtsdVal", v.AmtsdVal.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FromToAmountRange1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FromToAmountRange1"
	fedwire.AddError(&errs, baseName+".FrAmt", v.FrAmt.Validate())
	fedwire.AddError(&errs, baseName+".ToAmt", v.ToAmt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Garnishment3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Garnishment3"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.Grnshee != nil {
		fedwire.AddError(&errs, baseName+".Grnshee", v.Grnshee.Validate())
	}
	if v.GrnshmtAdmstr != nil {
		fedwire.AddError(&errs, baseName+".GrnshmtAdmstr", v.GrnshmtAdmstr.Validate())
	}
	if v.RefNb != nil {
		fedwire.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if v.FmlyMdclInsrncInd != nil {
		fedwire.AddError(&errs, baseName+".FmlyMdclInsrncInd", v.FmlyMdclInsrncInd.Validate())
	}
	if v.MplyeeTermntnInd != nil {
		fedwire.AddError(&errs, baseName+".MplyeeTermntnInd", v.MplyeeTermntnInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericFinancialIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericFinancialIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification3"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification30) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification30"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification32) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification32"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if v.ShrtNm != nil {
		fedwire.AddError(&errs, baseName+".ShrtNm", v.ShrtNm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader81) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader81"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if v.MsgRcpt != nil {
		fedwire.AddError(&errs, baseName+".MsgRcpt", v.MsgRcpt.Validate())
	}
	if v.MsgPgntn != nil {
		fedwire.AddError(&errs, baseName+".MsgPgntn", v.MsgPgntn.Validate())
	}
	if v.OrgnlBizQry != nil {
		fedwire.AddError(&errs, baseName+".OrgnlBizQry", v.OrgnlBizQry.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationSource3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "IdentificationSource3Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ImpliedCurrencyAmountRange1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ImpliedCurrencyAmountRange1Choice"
	if v.FrAmt != nil {
		fedwire.AddError(&errs, baseName+".FrAmt", v.FrAmt.Validate())
	}
	if v.ToAmt != nil {
		fedwire.AddError(&errs, baseName+".ToAmt", v.ToAmt.Validate())
	}
	if v.FrToAmt != nil {
		fedwire.AddError(&errs, baseName+".FrToAmt", v.FrToAmt.Validate())
	}
	if v.EQAmt != nil {
		fedwire.AddError(&errs, baseName+".EQAmt", v.EQAmt.Validate())
	}
	if v.NEQAmt != nil {
		fedwire.AddError(&errs, baseName+".NEQAmt", v.NEQAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InterestRecord2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InterestRecord2"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InterestType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InterestType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageIdentification2"
	if v.MsgNmId != nil {
		fedwire.AddError(&errs, baseName+".MsgNmId", v.MsgNmId.Validate())
	}
	if v.MsgId != nil {
		fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress16"
	fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	fedwire.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions1"
	if v.NbOfNtries != nil {
		fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	}
	if v.Sum != nil {
		fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions4"
	if v.NbOfNtries != nil {
		fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	}
	if v.Sum != nil {
		fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	}
	if v.TtlNetNtry != nil {
		fedwire.AddError(&errs, baseName+".TtlNetNtry", v.TtlNetNtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification29) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification29"
	if v.AnyBIC != nil {
		fedwire.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.LEI != nil {
		fedwire.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalAndCurrentQuantities1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalAndCurrentQuantities1"
	fedwire.AddError(&errs, baseName+".FaceAmt", v.FaceAmt.Validate())
	fedwire.AddError(&errs, baseName+".AmtsdVal", v.AmtsdVal.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalBusinessQuery1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalBusinessQuery1"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.MsgNmId != nil {
		fedwire.AddError(&errs, baseName+".MsgNmId", v.MsgNmId.Validate())
	}
	if v.CreDtTm != nil {
		fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OtherContact1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OtherContact1"
	fedwire.AddError(&errs, baseName+".ChanlTp", v.ChanlTp.Validate())
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OtherIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OtherIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Sfx != nil {
		fedwire.AddError(&errs, baseName+".Sfx", v.Sfx.Validate())
	}
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Pagination1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Pagination1"
	fedwire.AddError(&errs, baseName+".PgNb", v.PgNb.Validate())
	fedwire.AddError(&errs, baseName+".LastPgInd", v.LastPgInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party38Choice"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fedwire.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice"
	if v.Pty != nil {
		fedwire.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Agt != nil {
		fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if v.CtctDtls != nil {
		fedwire.AddError(&errs, baseName+".CtctDtls", v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentCard4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentCard4"
	if v.PlainCardData != nil {
		fedwire.AddError(&errs, baseName+".PlainCardData", v.PlainCardData.Validate())
	}
	if v.CardCtryCd != nil {
		fedwire.AddError(&errs, baseName+".CardCtryCd", v.CardCtryCd.Validate())
	}
	if v.CardBrnd != nil {
		fedwire.AddError(&errs, baseName+".CardBrnd", v.CardBrnd.Validate())
	}
	if v.AddtlCardData != nil {
		fedwire.AddError(&errs, baseName+".AddtlCardData", v.AddtlCardData.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentContext3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentContext3"
	if v.CardPres != nil {
		fedwire.AddError(&errs, baseName+".CardPres", v.CardPres.Validate())
	}
	if v.CrdhldrPres != nil {
		fedwire.AddError(&errs, baseName+".CrdhldrPres", v.CrdhldrPres.Validate())
	}
	if v.OnLineCntxt != nil {
		fedwire.AddError(&errs, baseName+".OnLineCntxt", v.OnLineCntxt.Validate())
	}
	if v.AttndncCntxt != nil {
		fedwire.AddError(&errs, baseName+".AttndncCntxt", v.AttndncCntxt.Validate())
	}
	if v.TxEnvt != nil {
		fedwire.AddError(&errs, baseName+".TxEnvt", v.TxEnvt.Validate())
	}
	if v.TxChanl != nil {
		fedwire.AddError(&errs, baseName+".TxChanl", v.TxChanl.Validate())
	}
	if v.AttndntMsgCpbl != nil {
		fedwire.AddError(&errs, baseName+".AttndntMsgCpbl", v.AttndntMsgCpbl.Validate())
	}
	if v.AttndntLang != nil {
		fedwire.AddError(&errs, baseName+".AttndntLang", v.AttndntLang.Validate())
	}
	fedwire.AddError(&errs, baseName+".CardDataNtryMd", v.CardDataNtryMd.Validate())
	if v.FllbckInd != nil {
		fedwire.AddError(&errs, baseName+".FllbckInd", v.FllbckInd.Validate())
	}
	if v.AuthntcnMtd != nil {
		fedwire.AddError(&errs, baseName+".AuthntcnMtd", v.AuthntcnMtd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentReturnReason5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentReturnReason5"
	if v.OrgnlBkTxCd != nil {
		fedwire.AddError(&errs, baseName+".OrgnlBkTxCd", v.OrgnlBkTxCd.Validate())
	}
	if v.Orgtr != nil {
		fedwire.AddError(&errs, baseName+".Orgtr", v.Orgtr.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		for indx := range v.AddtlInf {
			fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation27) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation27"
	if v.InstrPrty != nil {
		fedwire.AddError(&errs, baseName+".InstrPrty", v.InstrPrty.Validate())
	}
	if v.ClrChanl != nil {
		fedwire.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if v.SvcLvl != nil {
		for indx := range v.SvcLvl {
			fedwire.AddError(&errs, baseName+".SvcLvl", v.SvcLvl[indx].Validate())
		}
	}
	if v.LclInstrm != nil {
		fedwire.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	if v.SeqTp != nil {
		fedwire.AddError(&errs, baseName+".SeqTp", v.SeqTp.Validate())
	}
	if v.CtgyPurp != nil {
		fedwire.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification13"
	if v.DtAndPlcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PlainCardData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PlainCardData1"
	fedwire.AddError(&errs, baseName+".PAN", v.PAN.Validate())
	if v.CardSeqNb != nil {
		fedwire.AddError(&errs, baseName+".CardSeqNb", v.CardSeqNb.Validate())
	}
	if v.FctvDt != nil {
		fedwire.AddError(&errs, baseName+".FctvDt", v.FctvDt.Validate())
	}
	fedwire.AddError(&errs, baseName+".XpryDt", v.XpryDt.Validate())
	if v.SvcCd != nil {
		fedwire.AddError(&errs, baseName+".SvcCd", v.SvcCd.Validate())
	}
	if v.TrckData != nil {
		for indx := range v.TrckData {
			fedwire.AddError(&errs, baseName+".TrckData", v.TrckData[indx].Validate())
		}
	}
	if v.CardSctyCd != nil {
		fedwire.AddError(&errs, baseName+".CardSctyCd", v.CardSctyCd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PointOfInteraction1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PointOfInteraction1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SysNm != nil {
		fedwire.AddError(&errs, baseName+".SysNm", v.SysNm.Validate())
	}
	if v.GrpId != nil {
		fedwire.AddError(&errs, baseName+".GrpId", v.GrpId.Validate())
	}
	if v.Cpblties != nil {
		fedwire.AddError(&errs, baseName+".Cpblties", v.Cpblties.Validate())
	}
	if v.Cmpnt != nil {
		for indx := range v.Cmpnt {
			fedwire.AddError(&errs, baseName+".Cmpnt", v.Cmpnt[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PointOfInteractionCapabilities1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PointOfInteractionCapabilities1"
	if v.CardRdngCpblties != nil {
		for indx := range v.CardRdngCpblties {
			fedwire.AddError(&errs, baseName+".CardRdngCpblties", v.CardRdngCpblties[indx].Validate())
		}
	}
	if v.CrdhldrVrfctnCpblties != nil {
		for indx := range v.CrdhldrVrfctnCpblties {
			fedwire.AddError(&errs, baseName+".CrdhldrVrfctnCpblties", v.CrdhldrVrfctnCpblties[indx].Validate())
		}
	}
	if v.OnLineCpblties != nil {
		fedwire.AddError(&errs, baseName+".OnLineCpblties", v.OnLineCpblties.Validate())
	}
	if v.DispCpblties != nil {
		for indx := range v.DispCpblties {
			fedwire.AddError(&errs, baseName+".DispCpblties", v.DispCpblties[indx].Validate())
		}
	}
	if v.PrtLineWidth != nil {
		fedwire.AddError(&errs, baseName+".PrtLineWidth", v.PrtLineWidth.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PointOfInteractionComponent1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PointOfInteractionComponent1"
	fedwire.AddError(&errs, baseName+".POICmpntTp", v.POICmpntTp.Validate())
	if v.ManfctrId != nil {
		fedwire.AddError(&errs, baseName+".ManfctrId", v.ManfctrId.Validate())
	}
	if v.Mdl != nil {
		fedwire.AddError(&errs, baseName+".Mdl", v.Mdl.Validate())
	}
	if v.VrsnNb != nil {
		fedwire.AddError(&errs, baseName+".VrsnNb", v.VrsnNb.Validate())
	}
	if v.SrlNb != nil {
		fedwire.AddError(&errs, baseName+".SrlNb", v.SrlNb.Validate())
	}
	if v.ApprvlNb != nil {
		for indx := range v.ApprvlNb {
			fedwire.AddError(&errs, baseName+".ApprvlNb", v.ApprvlNb[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress24) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress24"
	if v.AdrTp != nil {
		fedwire.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fedwire.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		fedwire.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		fedwire.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		fedwire.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		fedwire.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.TwnLctnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		fedwire.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Price7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Price7"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Val", v.Val.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PriceRateOrAmount3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PriceRateOrAmount3Choice"
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Product2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Product2"
	fedwire.AddError(&errs, baseName+".PdctCd", v.PdctCd.Validate())
	if v.UnitOfMeasr != nil {
		fedwire.AddError(&errs, baseName+".UnitOfMeasr", v.UnitOfMeasr.Validate())
	}
	if v.PdctQty != nil {
		fedwire.AddError(&errs, baseName+".PdctQty", v.PdctQty.Validate())
	}
	if v.UnitPric != nil {
		fedwire.AddError(&errs, baseName+".UnitPric", v.UnitPric.Validate())
	}
	if v.PdctAmt != nil {
		fedwire.AddError(&errs, baseName+".PdctAmt", v.PdctAmt.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if v.AddtlPdctInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlPdctInf", v.AddtlPdctInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryAgent4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryAgent4"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryBankTransactionCodeStructure1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryBankTransactionCodeStructure1"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryDate3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryDate3"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryParty5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryParty5"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryPrice2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryPrice2"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Pric", v.Pric.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryQuantity1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryQuantity1"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Qty", v.Qty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryReference1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryReference1"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountIdentification1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Rate4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Rate4"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.VldtyRg != nil {
		fedwire.AddError(&errs, baseName+".VldtyRg", v.VldtyRg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RateType4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RateType4Choice"
	if v.Pctg != nil {
		fedwire.AddError(&errs, baseName+".Pctg", v.Pctg.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation7"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fedwire.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if v.LineDtls != nil {
		for indx := range v.LineDtls {
			fedwire.AddError(&errs, baseName+".LineDtls", v.LineDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType3Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType4"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount2"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fedwire.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount3"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fedwire.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation21"
	if v.Ustrd != nil {
		for indx := range v.Ustrd {
			fedwire.AddError(&errs, baseName+".Ustrd", v.Ustrd[indx].Validate())
		}
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			fedwire.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocation7"
	if v.RmtId != nil {
		fedwire.AddError(&errs, baseName+".RmtId", v.RmtId.Validate())
	}
	if v.RmtLctnDtls != nil {
		for indx := range v.RmtLctnDtls {
			fedwire.AddError(&errs, baseName+".RmtLctnDtls", v.RmtLctnDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocationData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocationData1"
	fedwire.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	if v.ElctrncAdr != nil {
		fedwire.AddError(&errs, baseName+".ElctrncAdr", v.ElctrncAdr.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportEntry13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportEntry13"
	if v.NtryRef != nil {
		fedwire.AddError(&errs, baseName+".NtryRef", v.NtryRef.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	if v.RvslInd != nil {
		fedwire.AddError(&errs, baseName+".RvslInd", v.RvslInd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	if v.BookgDt != nil {
		fedwire.AddError(&errs, baseName+".BookgDt", v.BookgDt.Validate())
	}
	if v.ValDt != nil {
		fedwire.AddError(&errs, baseName+".ValDt", v.ValDt.Validate())
	}
	if v.AcctSvcrRef != nil {
		fedwire.AddError(&errs, baseName+".AcctSvcrRef", v.AcctSvcrRef.Validate())
	}
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	if v.ComssnWvrInd != nil {
		fedwire.AddError(&errs, baseName+".ComssnWvrInd", v.ComssnWvrInd.Validate())
	}
	if v.AddtlInfInd != nil {
		fedwire.AddError(&errs, baseName+".AddtlInfInd", v.AddtlInfInd.Validate())
	}
	if v.AmtDtls != nil {
		fedwire.AddError(&errs, baseName+".AmtDtls", v.AmtDtls.Validate())
	}
	if v.Chrgs != nil {
		fedwire.AddError(&errs, baseName+".Chrgs", v.Chrgs.Validate())
	}
	if v.TechInptChanl != nil {
		fedwire.AddError(&errs, baseName+".TechInptChanl", v.TechInptChanl.Validate())
	}
	if v.Intrst != nil {
		fedwire.AddError(&errs, baseName+".Intrst", v.Intrst.Validate())
	}
	if v.CardTx != nil {
		fedwire.AddError(&errs, baseName+".CardTx", v.CardTx.Validate())
	}
	if v.NtryDtls != nil {
		for indx := range v.NtryDtls {
			fedwire.AddError(&errs, baseName+".NtryDtls", v.NtryDtls[indx].Validate())
		}
	}
	if v.AddtlNtryInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlNtryInf", v.AddtlNtryInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportingSource1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportingSource1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReturnReason5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReturnReason5Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SecuritiesAccount19) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SecuritiesAccount19"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SecurityIdentification19) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SecurityIdentification19"
	if v.ISIN != nil {
		fedwire.AddError(&errs, baseName+".ISIN", v.ISIN.Validate())
	}
	if v.OthrId != nil {
		for indx := range v.OthrId {
			fedwire.AddError(&errs, baseName+".OthrId", v.OthrId[indx].Validate())
		}
	}
	if v.Desc != nil {
		fedwire.AddError(&errs, baseName+".Desc", v.Desc.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SequenceRange1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SequenceRange1"
	fedwire.AddError(&errs, baseName+".FrSeq", v.FrSeq.Validate())
	fedwire.AddError(&errs, baseName+".ToSeq", v.ToSeq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SequenceRange1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SequenceRange1Choice"
	if v.FrSeq != nil {
		fedwire.AddError(&errs, baseName+".FrSeq", v.FrSeq.Validate())
	}
	if v.ToSeq != nil {
		fedwire.AddError(&errs, baseName+".ToSeq", v.ToSeq.Validate())
	}
	for indx := range v.FrToSeq {
		fedwire.AddError(&errs, baseName+".FrToSeq", v.FrToSeq[indx].Validate())
	}
	for indx := range v.EQSeq {
		fedwire.AddError(&errs, baseName+".EQSeq", v.EQSeq[indx].Validate())
	}
	for indx := range v.NEQSeq {
		fedwire.AddError(&errs, baseName+".NEQSeq", v.NEQSeq[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation17) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation17"
	if v.RfrdDocInf != nil {
		for indx := range v.RfrdDocInf {
			fedwire.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf[indx].Validate())
		}
	}
	if v.RfrdDocAmt != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt.Validate())
	}
	if v.CdtrRefInf != nil {
		fedwire.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		fedwire.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		fedwire.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.TaxRmt != nil {
		fedwire.AddError(&errs, baseName+".TaxRmt", v.TaxRmt.Validate())
	}
	if v.GrnshmtRmt != nil {
		fedwire.AddError(&errs, baseName+".GrnshmtRmt", v.GrnshmtRmt.Validate())
	}
	if v.AddtlRmtInf != nil {
		for indx := range v.AddtlRmtInf {
			fedwire.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SupplementaryData1"
	if v.PlcAndNm != nil {
		fedwire.AddError(&errs, baseName+".PlcAndNm", v.PlcAndNm.Validate())
	}
	fedwire.AddError(&errs, baseName+".Envlp", v.Envlp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryDataEnvelope1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmount3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmount3"
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.TaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxblBaseAmt", v.TaxblBaseAmt.Validate())
	}
	if v.TtlAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.Dtls != nil {
		for indx := range v.Dtls {
			fedwire.AddError(&errs, baseName+".Dtls", v.Dtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountAndType1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAuthorisation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAuthorisation1"
	if v.Titl != nil {
		fedwire.AddError(&errs, baseName+".Titl", v.Titl.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxCharges2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxCharges2"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxData1"
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.AdmstnZone != nil {
		fedwire.AddError(&errs, baseName+".AdmstnZone", v.AdmstnZone.Validate())
	}
	if v.RefNb != nil {
		fedwire.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		fedwire.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		fedwire.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fedwire.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxInformation10) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxInformation10"
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.AdmstnZone != nil {
		fedwire.AddError(&errs, baseName+".AdmstnZone", v.AdmstnZone.Validate())
	}
	if v.RefNb != nil {
		fedwire.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		fedwire.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		fedwire.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fedwire.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty1"
	if v.TaxId != nil {
		fedwire.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fedwire.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty2"
	if v.TaxId != nil {
		fedwire.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fedwire.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if v.Authstn != nil {
		fedwire.AddError(&errs, baseName+".Authstn", v.Authstn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxPeriod3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxPeriod3"
	if v.Yr != nil {
		fedwire.AddError(&errs, baseName+".Yr", v.Yr.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecord3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecord3"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ctgy != nil {
		fedwire.AddError(&errs, baseName+".Ctgy", v.Ctgy.Validate())
	}
	if v.CtgyDtls != nil {
		fedwire.AddError(&errs, baseName+".CtgyDtls", v.CtgyDtls.Validate())
	}
	if v.DbtrSts != nil {
		fedwire.AddError(&errs, baseName+".DbtrSts", v.DbtrSts.Validate())
	}
	if v.CertId != nil {
		fedwire.AddError(&errs, baseName+".CertId", v.CertId.Validate())
	}
	if v.FrmsCd != nil {
		fedwire.AddError(&errs, baseName+".FrmsCd", v.FrmsCd.Validate())
	}
	if v.Prd != nil {
		fedwire.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	if v.TaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecordDetails3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecordDetails3"
	if v.Prd != nil {
		fedwire.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TechnicalInputChannel1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TechnicalInputChannel1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalTransactions6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalTransactions6"
	if v.TtlNtries != nil {
		fedwire.AddError(&errs, baseName+".TtlNtries", v.TtlNtries.Validate())
	}
	if v.TtlCdtNtries != nil {
		fedwire.AddError(&errs, baseName+".TtlCdtNtries", v.TtlCdtNtries.Validate())
	}
	if v.TtlDbtNtries != nil {
		fedwire.AddError(&errs, baseName+".TtlDbtNtries", v.TtlDbtNtries.Validate())
	}
	if v.TtlNtriesPerBkTxCd != nil {
		for indx := range v.TtlNtriesPerBkTxCd {
			fedwire.AddError(&errs, baseName+".TtlNtriesPerBkTxCd", v.TtlNtriesPerBkTxCd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalsPerBankTransactionCode5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalsPerBankTransactionCode5"
	if v.NbOfNtries != nil {
		fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	}
	if v.Sum != nil {
		fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	}
	if v.TtlNetNtry != nil {
		fedwire.AddError(&errs, baseName+".TtlNetNtry", v.TtlNetNtry.Validate())
	}
	if v.CdtNtries != nil {
		fedwire.AddError(&errs, baseName+".CdtNtries", v.CdtNtries.Validate())
	}
	if v.DbtNtries != nil {
		fedwire.AddError(&errs, baseName+".DbtNtries", v.DbtNtries.Validate())
	}
	if v.FcstInd != nil {
		fedwire.AddError(&errs, baseName+".FcstInd", v.FcstInd.Validate())
	}
	fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	if v.Avlbty != nil {
		for indx := range v.Avlbty {
			fedwire.AddError(&errs, baseName+".Avlbty", v.Avlbty[indx].Validate())
		}
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TrackData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TrackData1"
	if v.TrckNb != nil {
		fedwire.AddError(&errs, baseName+".TrckNb", v.TrckNb.Validate())
	}
	fedwire.AddError(&errs, baseName+".TrckVal", v.TrckVal.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionAgents5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionAgents5"
	if v.InstgAgt != nil {
		fedwire.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	}
	if v.InstdAgt != nil {
		fedwire.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	}
	if v.DbtrAgt != nil {
		fedwire.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	}
	if v.CdtrAgt != nil {
		fedwire.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	}
	if v.IntrmyAgt1 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt1", v.IntrmyAgt1.Validate())
	}
	if v.IntrmyAgt2 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt2", v.IntrmyAgt2.Validate())
	}
	if v.IntrmyAgt3 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt3", v.IntrmyAgt3.Validate())
	}
	if v.RcvgAgt != nil {
		fedwire.AddError(&errs, baseName+".RcvgAgt", v.RcvgAgt.Validate())
	}
	if v.DlvrgAgt != nil {
		fedwire.AddError(&errs, baseName+".DlvrgAgt", v.DlvrgAgt.Validate())
	}
	if v.IssgAgt != nil {
		fedwire.AddError(&errs, baseName+".IssgAgt", v.IssgAgt.Validate())
	}
	if v.SttlmPlc != nil {
		fedwire.AddError(&errs, baseName+".SttlmPlc", v.SttlmPlc.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionDates3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionDates3"
	if v.AccptncDtTm != nil {
		fedwire.AddError(&errs, baseName+".AccptncDtTm", v.AccptncDtTm.Validate())
	}
	if v.TradActvtyCtrctlSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".TradActvtyCtrctlSttlmDt", v.TradActvtyCtrctlSttlmDt.Validate())
	}
	if v.TradDt != nil {
		fedwire.AddError(&errs, baseName+".TradDt", v.TradDt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.StartDt != nil {
		fedwire.AddError(&errs, baseName+".StartDt", v.StartDt.Validate())
	}
	if v.EndDt != nil {
		fedwire.AddError(&errs, baseName+".EndDt", v.EndDt.Validate())
	}
	if v.TxDtTm != nil {
		fedwire.AddError(&errs, baseName+".TxDtTm", v.TxDtTm.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionIdentifier1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionIdentifier1"
	fedwire.AddError(&errs, baseName+".TxDtTm", v.TxDtTm.Validate())
	fedwire.AddError(&errs, baseName+".TxRef", v.TxRef.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionInterest4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionInterest4"
	if v.TtlIntrstAndTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlIntrstAndTaxAmt", v.TtlIntrstAndTaxAmt.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fedwire.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionParties9) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionParties9"
	if v.InitgPty != nil {
		fedwire.AddError(&errs, baseName+".InitgPty", v.InitgPty.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.DbtrAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.CdtrAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	}
	if v.UltmtCdtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if v.TradgPty != nil {
		fedwire.AddError(&errs, baseName+".TradgPty", v.TradgPty.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionPrice4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionPrice4Choice"
	if v.DealPric != nil {
		fedwire.AddError(&errs, baseName+".DealPric", v.DealPric.Validate())
	}
	for indx := range v.Prtry {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionQuantities3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionQuantities3Choice"
	if v.Qty != nil {
		fedwire.AddError(&errs, baseName+".Qty", v.Qty.Validate())
	}
	if v.OrgnlAndCurFaceAmt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlAndCurFaceAmt", v.OrgnlAndCurFaceAmt.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionReferences6"
	if v.MsgId != nil {
		fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	}
	if v.AcctSvcrRef != nil {
		fedwire.AddError(&errs, baseName+".AcctSvcrRef", v.AcctSvcrRef.Validate())
	}
	if v.PmtInfId != nil {
		fedwire.AddError(&errs, baseName+".PmtInfId", v.PmtInfId.Validate())
	}
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	if v.EndToEndId != nil {
		fedwire.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	}
	if v.UETR != nil {
		fedwire.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if v.TxId != nil {
		fedwire.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	if v.MndtId != nil {
		fedwire.AddError(&errs, baseName+".MndtId", v.MndtId.Validate())
	}
	if v.ChqNb != nil {
		fedwire.AddError(&errs, baseName+".ChqNb", v.ChqNb.Validate())
	}
	if v.ClrSysRef != nil {
		fedwire.AddError(&errs, baseName+".ClrSysRef", v.ClrSysRef.Validate())
	}
	if v.AcctOwnrTxId != nil {
		fedwire.AddError(&errs, baseName+".AcctOwnrTxId", v.AcctOwnrTxId.Validate())
	}
	if v.AcctSvcrTxId != nil {
		fedwire.AddError(&errs, baseName+".AcctSvcrTxId", v.AcctSvcrTxId.Validate())
	}
	if v.MktInfrstrctrTxId != nil {
		fedwire.AddError(&errs, baseName+".MktInfrstrctrTxId", v.MktInfrstrctrTxId.Validate())
	}
	if v.PrcgId != nil {
		fedwire.AddError(&errs, baseName+".PrcgId", v.PrcgId.Validate())
	}
	if v.Prtry != nil {
		for indx := range v.Prtry {
			fedwire.AddError(&errs, baseName+".Prtry", v.Prtry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v YieldedOrValueType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "YieldedOrValueType1Choice"
	if v.Yldd != nil {
		fedwire.AddError(&errs, baseName+".Yldd", v.Yldd.Validate())
	}
	if v.ValTp != nil {
		fedwire.AddError(&errs, baseName+".ValTp", v.ValTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v ActiveOrHistoricCurrencyAnd13DecimalAmountSimpleType) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 13); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v AddressType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICDec2014Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v AttendanceContext1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ATTD", "SATT", "UATT"); err != nil {
		return err
	}
	return nil
}

func (v AuthenticationEntity1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ICCD", "AGNT", "MERC"); err != nil {
		return err
	}
	return nil
}

func (v AuthenticationMethod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "UKNW", "BYPS", "NPIN", "FPIN", "CPSG", "PPSG", "MANU", "MERC", "SCRT", "SNCT", "SCNL"); err != nil {
		return err
	}
	return nil
}

func (v BICFIDec2014Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BaseOneRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v CSCManagement1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "PRST", "BYPS", "UNRD", "NCSC"); err != nil {
		return err
	}
	return nil
}

func (v CardDataReading1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "TAGC", "PHYS", "BRCD", "MGST", "CICC", "DFLE", "CTLS", "ECTL"); err != nil {
		return err
	}
	return nil
}

func (v CardPaymentServiceType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "AGGR", "DCCV", "GRTT", "INSP", "LOYT", "NRES", "PUCO", "RECP", "SOAF", "UNAF", "VCAU"); err != nil {
		return err
	}
	return nil
}

func (v CardholderVerificationCapability1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MNSG", "NPIN", "FCPN", "FEPN", "FDSG", "FBIO", "MNVR", "FBIG", "APKI", "PKIS", "CHDT", "SCEC"); err != nil {
		return err
	}
	return nil
}

func (v ChargeBearerType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DEBT", "CRED", "SHAR", "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v ChargeIncludedIndicator) Validate() error {
	return nil
}

func (v ClearingChannel2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RTGS", "RTNS", "MPNS", "BOOK"); err != nil {
		return err
	}
	return nil
}

func (v CopyDuplicate1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CODU", "COPY", "DUPL"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType6Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP", "BOLD", "VCHR", "AROI", "TSUT", "PUOR"); err != nil {
		return err
	}
	return nil
}

func (v Exact1NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]`); err != nil {
		return err
	}
	return nil
}

func (v Exact3NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{3}`); err != nil {
		return err
	}
	return nil
}

func (v Exact4AlphaNumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-zA-Z0-9]{4}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalAccountIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBalanceSubType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBalanceType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBankTransactionDomain1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBankTransactionFamily1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalBankTransactionSubFamily1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCardTransactionCategory1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashAccountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCategoryPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalChargeType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 5); err != nil {
		return err
	}
	return nil
}

func (v ExternalCreditLineType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalDiscountAmountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalDocumentLineType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalEntryStatus1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalFinancialInstitutionIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalFinancialInstrumentIdentificationType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalGarnishmentType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalLocalInstrument1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalProxyAccountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalRePresentmentReason1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalReportingSource1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalReturnReason1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalTaxAmountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalTechnicalInputChannel1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IBAN2007Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v ISINOct2015Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}`); err != nil {
		return err
	}
	return nil
}

func (v ISO2ALanguageCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v ISOYear) Validate() error {
	return nil
}

func (v ISOYearMonth) Validate() error {
	return nil
}

func (v ImpliedCurrencyAndAmount) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 5); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v InterestType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "INDY", "OVRN"); err != nil {
		return err
	}
	return nil
}

func (v LEIIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v Max1025Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 1025); err != nil {
		return err
	}
	return nil
}

func (v Max105Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 105); err != nil {
		return err
	}
	return nil
}

func (v Max128Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 128); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max15PlusSignedNumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[\+]{0,1}[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max350Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 350); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max3NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,3}`); err != nil {
		return err
	}
	return nil
}

func (v Max4Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max500Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 500); err != nil {
		return err
	}
	return nil
}

func (v Max5NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,5}`); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v Min2Max3NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{2,3}`); err != nil {
		return err
	}
	return nil
}

func (v Min3Max4NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{3,4}`); err != nil {
		return err
	}
	return nil
}

func (v Min8Max28NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8,28}`); err != nil {
		return err
	}
	return nil
}

func (v NamePrefix2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DOCT", "MADM", "MISS", "MIST", "MIKS"); err != nil {
		return err
	}
	return nil
}

func (v NonNegativeDecimalNumber) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v Number) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v OnLineCapability1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "OFLN", "ONLN", "SMON"); err != nil {
		return err
	}
	return nil
}

func (v POIComponentType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "SOFT", "EMVK", "EMVO", "MRIT", "CHIT", "SECM", "PEDV"); err != nil {
		return err
	}
	return nil
}

func (v PartyType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "OPOI", "MERC", "ACCP", "ITAG", "ACQR", "CISS", "DLIS"); err != nil {
		return err
	}
	return nil
}

func (v PartyType4Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MERC", "ACCP", "ITAG", "ACQR", "CISS", "TAXH"); err != nil {
		return err
	}
	return nil
}

func (v PercentageRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v PhoneNumber) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v PositiveNumber) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v PreferredContactMethod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "LETT", "MAIL", "PHON", "FAXX", "CELL"); err != nil {
		return err
	}
	return nil
}

func (v PriceValueType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DISC", "PREM", "PARV"); err != nil {
		return err
	}
	return nil
}

func (v Priority2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "HIGH", "NORM"); err != nil {
		return err
	}
	return nil
}

func (v RemittanceLocationMethod2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "FAXI", "EDIC", "URID", "EMAL", "POST", "SMSM"); err != nil {
		return err
	}
	return nil
}

func (v SequenceType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "FRST", "RCUR", "FNAL", "OOFF", "RPRE"); err != nil {
		return err
	}
	return nil
}

func (v TaxRecordPeriod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MM01", "MM02", "MM03", "MM04", "MM05", "MM06", "MM07", "MM08", "MM09", "MM10", "MM11", "MM12", "QTR1", "QTR2", "QTR3", "QTR4", "HLF1", "HLF2"); err != nil {
		return err
	}
	return nil
}

func (v TransactionChannel1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MAIL", "TLPH", "ECOM", "TVPY"); err != nil {
		return err
	}
	return nil
}

func (v TransactionEnvironment1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MERC", "PRIV", "PUBL"); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}

func (v UnitOfMeasure1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "PIEC", "TONS", "FOOT", "GBGA", "USGA", "GRAM", "INCH", "KILO", "PUND", "METR", "CMET", "MMET", "LITR", "CELI", "MILI", "GBOU", "USOU", "GBQA", "USQA", "GBPI", "USPI", "MILE", "KMET", "YARD", "SQKI", "HECT", "ARES", "SMET", "SCMT", "SMIL", "SQMI", "SQYA", "SQFO", "SQIN", "ACRE"); err != nil {
		return err
	}
	return nil
}

func (v UserInterface2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MDSP", "CDSP"); err != nil {
		return err
	}
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}

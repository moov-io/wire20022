package Master

import (
	"path/filepath"
	"testing"

	Archive "github.com/moov-io/wire20022/pkg/archives"
	"github.com/stretchr/testify/require"
)

func TestDocumentToModel0(t *testing.T) {
	var sampleXML = filepath.Join("swiftSample", "AccountBalanceReport_Scenario1_Step2_camt.052_ABAR_MM")
	var xmlData, err = Archive.ReadXMLFile(sampleXML)
	require.NoError(t, err, "Failed to read XML file")

	model, err := MessageWith(xmlData)
	require.NoError(t, err, "Failed to make XML structure")
	require.Equal(t, model.MessageId, Archive.AccountBalanceReport)
	require.NotNil(t, model.CreationDateTime)
	require.Equal(t, model.MessagePagination.PageNumber, "1")
	require.Equal(t, model.MessagePagination.LastPageIndicator, true)
	require.Equal(t, model.OriginalBusinessMsgId, "20230921231981435ABARMMrequest1")
	require.Equal(t, model.OriginalBusinessMsgNameId, "camt.060.001.05")
	require.NotNil(t, model.OriginalBusinessMsgCreateTime)
	require.Equal(t, model.ReportTypeId, Archive.ABMS)
	require.NotNil(t, model.ReportCreatedDate)
	require.Equal(t, model.AccountOtherId, "231981435")
	require.Equal(t, model.AccountType, "M")
	require.Equal(t, model.RelatedAccountOtherId, "231981435")
	require.Equal(t, model.Balances[0].BalanceTypeId, Archive.DaylightOverdraftBalance)
	require.Equal(t, model.Balances[0].Amount.Amount, 270458895930.79)
	require.Equal(t, model.Balances[0].Amount.Currency, "USD")
	require.Equal(t, model.Balances[0].CreditDebitIndicator, Archive.Credit)
	require.NotNil(t, model.Balances[0].DateTime)
	require.Equal(t, model.Balances[1].BalanceTypeId, Archive.AccountBalance)
	require.Equal(t, model.Balances[1].CdtLines[0].Included, true)
	require.Equal(t, model.Balances[1].CdtLines[0].Type, Archive.NetDebitCap)
	require.Equal(t, model.Balances[1].CdtLines[0].Amount.Amount, 23125500000.00)
	require.Equal(t, model.Balances[1].CdtLines[0].Amount.Currency, "USD")
	require.NotNil(t, model.Balances[1].CdtLines[0].DateTime)
	require.Equal(t, model.Balances[1].CdtLines[1].Included, true)
	require.Equal(t, model.Balances[1].CdtLines[1].Type, Archive.CollateralizedCapacity)
	require.Equal(t, model.Balances[1].CdtLines[1].Amount.Amount, 316874500000.00)
	require.Equal(t, model.Balances[1].CdtLines[1].Amount.Currency, "USD")
	require.NotNil(t, model.Balances[1].CdtLines[1].DateTime)
	require.Equal(t, model.Balances[1].CdtLines[2].Included, true)
	require.Equal(t, model.Balances[1].CdtLines[2].Type, Archive.CollateralAvailable)
	require.Equal(t, model.Balances[1].CdtLines[2].Amount.Amount, 82598573368.44)
	require.Equal(t, model.Balances[1].CdtLines[2].Amount.Currency, "USD")
	require.NotNil(t, model.Balances[1].CdtLines[2].DateTime)
	require.Equal(t, model.Balances[1].CdtLines[3].Included, true)
	require.Equal(t, model.Balances[1].CdtLines[3].Type, Archive.CollateralizedDaylightOverdrafts)
	require.Equal(t, model.Balances[1].CdtLines[3].Amount.Amount, 0.00)
	require.Equal(t, model.Balances[1].CdtLines[3].Amount.Currency, "USD")
	require.NotNil(t, model.Balances[1].CdtLines[3].DateTime)
	require.Equal(t, model.Balances[1].CdtLines[4].Included, true)
	require.Equal(t, model.Balances[1].CdtLines[4].Type, Archive.UncollateralizedDaylightOverdrafts)
	require.Equal(t, model.Balances[1].CdtLines[4].Amount.Amount, 0.00)
	require.Equal(t, model.Balances[1].CdtLines[4].Amount.Currency, "USD")
	require.NotNil(t, model.Balances[1].CdtLines[4].DateTime)
	require.Equal(t, model.Balances[1].Amount.Amount, 270594506052.13)
	require.Equal(t, model.Balances[1].Amount.Currency, "USD")
	require.Equal(t, model.Balances[1].CreditDebitIndicator, Archive.Credit)
	require.NotNil(t, model.Balances[1].DateTime)
	require.Equal(t, model.Balances[2].BalanceTypeId, Archive.AvailableBalanceFromDaylightOverdraft)
	require.Equal(t, model.Balances[2].Amount.Amount, 610458895930.79)
	require.Equal(t, model.Balances[2].Amount.Currency, "USD")
	require.Equal(t, model.Balances[2].CreditDebitIndicator, Archive.Credit)
	require.NotNil(t, model.Balances[2].DateTime)
	require.Equal(t, model.TransactionsSummary[0].TotalNetEntryAmount, 279595877422.72)
	require.Equal(t, model.TransactionsSummary[0].CreditDebitIndicator, Archive.Credit)
	require.Equal(t, model.TransactionsSummary[0].CreditEntries.NumberOfEntries, "16281")
	require.Equal(t, model.TransactionsSummary[0].CreditEntries.Sum, 420780358976.96)
	require.Equal(t, model.TransactionsSummary[0].DebitEntries.NumberOfEntries, "22134")
	require.Equal(t, model.TransactionsSummary[0].DebitEntries.Sum, 141184481554.24)
	require.Equal(t, model.TransactionsSummary[0].BankTransactionCode, Archive.FedwireFundsTransfers)
	require.NotNil(t, model.TransactionsSummary[0].Date)
	require.Equal(t, model.TransactionsSummary[1].TotalNetEntryAmount, 608598873.60)
	require.Equal(t, model.TransactionsSummary[1].CreditDebitIndicator, Archive.Credit)
	require.Equal(t, model.TransactionsSummary[1].CreditEntries.NumberOfEntries, "4")
	require.Equal(t, model.TransactionsSummary[1].CreditEntries.Sum, 993425694.01)
	require.Equal(t, model.TransactionsSummary[1].DebitEntries.NumberOfEntries, "6")
	require.Equal(t, model.TransactionsSummary[1].DebitEntries.Sum, 384826820.41)
	require.Equal(t, model.TransactionsSummary[1].BankTransactionCode, Archive.NationalSettlementServiceEntries)
	require.NotNil(t, model.TransactionsSummary[1].Date)
}

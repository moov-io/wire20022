// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.052.001.08
package ActivityReport_camt_052_001_08

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".BkToCstmrAcctRpt", v.BkToCstmrAcctRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice1"
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountReport251) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountReport251"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fedwire.AddError(&errs, baseName+".Acct", v.Acct.Validate())
	if v.TxsSummry != nil {
		fedwire.AddError(&errs, baseName+".TxsSummry", v.TxsSummry.Validate())
	}
	if v.Ntry != nil {
		for indx := range v.Ntry {
			fedwire.AddError(&errs, baseName+".Ntry", v.Ntry[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankToCustomerAccountReportV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankToCustomerAccountReportV08"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fedwire.AddError(&errs, baseName+".Rpt", v.Rpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure41) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure41"
	fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure42) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure42"
	fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount391) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount391"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTime2Choice1"
	if v.DtTm != nil {
		fedwire.AddError(&errs, baseName+".DtTm", v.DtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryDetails91) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryDetails91"
	fedwire.AddError(&errs, baseName+".TxDtls", v.TxDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryStatus1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryStatus1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EntryTransaction101) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EntryTransaction101"
	fedwire.AddError(&errs, baseName+".Refs", v.Refs.Validate())
	fedwire.AddError(&errs, baseName+".RltdAgts", v.RltdAgts.Validate())
	if v.LclInstrm != nil {
		fedwire.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	fedwire.AddError(&errs, baseName+".RltdDts", v.RltdDts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification11"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader811) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader811"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fedwire.AddError(&errs, baseName+".MsgPgntn", v.MsgPgntn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice1"
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageIdentification21"
	fedwire.AddError(&errs, baseName+".MsgNmId", v.MsgNmId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions11"
	fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	fedwire.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions41) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions41"
	fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Pagination1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Pagination1"
	fedwire.AddError(&errs, baseName+".PgNb", v.PgNb.Validate())
	fedwire.AddError(&errs, baseName+".LastPgInd", v.LastPgInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryBankTransactionCodeStructure11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryBankTransactionCodeStructure11"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryBankTransactionCodeStructure12) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryBankTransactionCodeStructure12"
	fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryDate31) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryDate31"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportEntry101) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportEntry101"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	fedwire.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	fedwire.AddError(&errs, baseName+".AddtlInfInd", v.AddtlInfInd.Validate())
	fedwire.AddError(&errs, baseName+".NtryDtls", v.NtryDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalTransactions61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalTransactions61"
	fedwire.AddError(&errs, baseName+".TtlNtries", v.TtlNtries.Validate())
	fedwire.AddError(&errs, baseName+".TtlCdtNtries", v.TtlCdtNtries.Validate())
	fedwire.AddError(&errs, baseName+".TtlDbtNtries", v.TtlDbtNtries.Validate())
	for indx := range v.TtlNtriesPerBkTxCd {
		fedwire.AddError(&errs, baseName+".TtlNtriesPerBkTxCd", v.TtlNtriesPerBkTxCd[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalsPerBankTransactionCode51) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalsPerBankTransactionCode51"
	fedwire.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	fedwire.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionAgents51) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionAgents51"
	fedwire.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	fedwire.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionDates31) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionDates31"
	fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionReferences61"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	if v.UETR != nil {
		fedwire.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if v.ClrSysRef != nil {
		fedwire.AddError(&errs, baseName+".ClrSysRef", v.ClrSysRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AccountReportingFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ACTR"); err != nil {
		return err
	}
	return nil
}

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v BankTransactionCodeFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "SENT", "RCVD"); err != nil {
		return err
	}
	return nil
}

func (v BankTransactionCodeFedwireFunds11) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "SENT", "RCVD", "DBIT", "CRDT"); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalEntryStatus1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IMADFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8}[A-Z0-9]{8}[0-9]{6}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 22); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 22); err != nil {
		return err
	}
	return nil
}

func (v LocalInstrumentFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "BTRC", "CTRC", "BTRS", "CTRD", "COVC", "DRRC", "DRRB", "COVS", "BTRD", "CTRS"); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max5NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,5}`); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v OMADFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{34,34}`); err != nil {
		return err
	}
	return nil
}

func (v ReportDatesFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "BPRD"); err != nil {
		return err
	}
	return nil
}

func (v ReportTimingFRS1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "EDAY"); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}

// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.110.001.01
package InvestigationRequest_camt_110_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".InvstgtnReq", v.InvstgtnReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AdditionalRequestData1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AdditionalRequestData1Choice1"
	if v.ReqNrrtv != nil {
		fedwire.AddError(&errs, baseName+".ReqNrrtv", v.ReqNrrtv.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTime2Choice1"
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationReason1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationReason1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationReason21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationReason21"
	fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if v.RsnSubTp != nil {
		fedwire.AddError(&errs, baseName+".RsnSubTp", v.RsnSubTp.Validate())
	}
	if v.AddtlReqData != nil {
		fedwire.AddError(&errs, baseName+".AddtlReqData", v.AddtlReqData.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationReasonSubType1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationReasonSubType1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationRequest21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationRequest21"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.RqstrInvstgtnId != nil {
		fedwire.AddError(&errs, baseName+".RqstrInvstgtnId", v.RqstrInvstgtnId.Validate())
	}
	if v.RspndrInvstgtnId != nil {
		fedwire.AddError(&errs, baseName+".RspndrInvstgtnId", v.RspndrInvstgtnId.Validate())
	}
	fedwire.AddError(&errs, baseName+".InvstgtnTp", v.InvstgtnTp.Validate())
	if v.InvstgtnSubTp != nil {
		fedwire.AddError(&errs, baseName+".InvstgtnSubTp", v.InvstgtnSubTp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Undrlyg", v.Undrlyg.Validate())
	fedwire.AddError(&errs, baseName+".Rqstr", v.Rqstr.Validate())
	fedwire.AddError(&errs, baseName+".Rspndr", v.Rspndr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationRequestV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationRequestV01"
	fedwire.AddError(&errs, baseName+".InvstgtnReq", v.InvstgtnReq.Validate())
	for indx := range v.InvstgtnData {
		fedwire.AddError(&errs, baseName+".InvstgtnData", v.InvstgtnData[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationSubType1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationSubType1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationType1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationType1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice1"
	if v.Agt != nil {
		fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingData2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingData2Choice1"
	if v.Initn != nil {
		fedwire.AddError(&errs, baseName+".Initn", v.Initn.Validate())
	}
	if v.IntrBk != nil {
		fedwire.AddError(&errs, baseName+".IntrBk", v.IntrBk.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingGroupInformation11"
	fedwire.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentInstruction81) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingPaymentInstruction81"
	fedwire.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	if v.OrgnlPmtInfId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlPmtInfId", v.OrgnlPmtInfId.Validate())
	}
	if v.OrgnlInstrId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	}
	if v.OrgnlEndToEndId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	fedwire.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	if v.OrgnlInstdAmt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlInstdAmt", v.OrgnlInstdAmt.Validate())
	}
	fedwire.AddError(&errs, baseName+".ReqdExctnDt", v.ReqdExctnDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentTransaction71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingPaymentTransaction71"
	fedwire.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	if v.OrgnlInstrId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	}
	if v.OrgnlEndToEndId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlTxId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlTxId", v.OrgnlTxId.Validate())
	}
	fedwire.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	if v.OrgnlIntrBkSttlmAmt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlIntrBkSttlmAmt", v.OrgnlIntrBkSttlmAmt.Validate())
	}
	if v.OrgnlIntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlIntrBkSttlmDt", v.OrgnlIntrBkSttlmDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationReason1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationReasonSubType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationSubType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IMADFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8}[A-Z0-9]{8}[0-9]{6}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 22); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 22); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max500Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 500); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}

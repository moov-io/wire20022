// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:head.001.001.03
package BusinessApplicationHeader_head_001_001_03

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v AppHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AppHdr"
	fedwire.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	fedwire.AddError(&errs, baseName+".To", v.To.Validate())
	fedwire.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	fedwire.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	fedwire.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	fedwire.AddError(&errs, baseName+".MktPrctc", v.MktPrctc.Validate())
	fedwire.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.BizPrcgDt != nil {
		fedwire.AddError(&errs, baseName+".BizPrcgDt", v.BizPrcgDt.Validate())
	}
	if v.CpyDplct != nil {
		fedwire.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.PssblDplct != nil {
		fedwire.AddError(&errs, baseName+".PssblDplct", v.PssblDplct.Validate())
	}
	if v.Rltd != nil {
		fedwire.AddError(&errs, baseName+".Rltd", v.Rltd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessApplicationHeader71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessApplicationHeader71"
	fedwire.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	fedwire.AddError(&errs, baseName+".To", v.To.Validate())
	fedwire.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	fedwire.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	fedwire.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	fedwire.AddError(&errs, baseName+".MktPrctc", v.MktPrctc.Validate())
	fedwire.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.BizPrcgDt != nil {
		fedwire.AddError(&errs, baseName+".BizPrcgDt", v.BizPrcgDt.Validate())
	}
	if v.PssblDplct != nil {
		fedwire.AddError(&errs, baseName+".PssblDplct", v.PssblDplct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessApplicationHeaderV03) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessApplicationHeaderV03"
	fedwire.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	fedwire.AddError(&errs, baseName+".To", v.To.Validate())
	fedwire.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	fedwire.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	fedwire.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	fedwire.AddError(&errs, baseName+".MktPrctc", v.MktPrctc.Validate())
	fedwire.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.BizPrcgDt != nil {
		fedwire.AddError(&errs, baseName+".BizPrcgDt", v.BizPrcgDt.Validate())
	}
	if v.CpyDplct != nil {
		fedwire.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.PssblDplct != nil {
		fedwire.AddError(&errs, baseName+".PssblDplct", v.PssblDplct.Validate())
	}
	if v.Rltd != nil {
		fedwire.AddError(&errs, baseName+".Rltd", v.Rltd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ImplementationSpecification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ImplementationSpecification11"
	fedwire.AddError(&errs, baseName+".Regy", v.Regy.Validate())
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ImplementationSpecification12) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ImplementationSpecification12"
	fedwire.AddError(&errs, baseName+".Regy", v.Regy.Validate())
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party44Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party44Choice1"
	if v.FIId != nil {
		fedwire.AddError(&errs, baseName+".FIId", v.FIId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v BusinessServiceFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "TEST", "PROD"); err != nil {
		return err
	}
	return nil
}

func (v ConnectionPartyIdentifierFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v CopyDuplicate1Code1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DUPL"); err != nil {
		return err
	}
	return nil
}

func (v MarketPracticeIdentificationFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `frb([.]{1,1})fedwire([.]{1,1})(([a-z]{3,3}[.]{1,1})){0,1}01`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 14); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 18); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max350TextFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "www2.swift.com/mystandards/#/group/Federal_Reserve_Financial_Services/Fedwire_Funds_Service"); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}

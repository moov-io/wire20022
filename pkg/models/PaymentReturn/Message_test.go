package PaymentReturn

import (
	"path/filepath"
	"testing"

	"github.com/moov-io/wire20022/pkg/models"
	"github.com/stretchr/testify/require"
)

func TestDocumentToModel0(t *testing.T) {
	var sampleXML = filepath.Join("swiftSample", "FedwireFundsAcknowledgement_Scenario2_Step4_pacs.004")
	var xmlData, err = models.ReadXMLFile(sampleXML)
	require.NoError(t, err, "Failed to read XML file")

	model, err := ParseXML(xmlData)
	if err != nil {
		t.Fatal(err)
	}
	require.NoError(t, err, "Failed to make XML structure")
	require.Equal(t, model.MessageId, "20250310B1QDRCQR000724")
	require.NotNil(t, model.CreatedDateTime)
	require.Equal(t, model.NumberOfTransactions, "1")
	require.Equal(t, model.SettlementMethod, models.SettlementCLRG)
	require.Equal(t, model.CommonClearingSysCode, models.ClearingSysFDW)
	require.Equal(t, model.OriginalMessageId, "20250310B1QDRCQR000721")
	require.Equal(t, model.OriginalMessageNameId, "pacs.008.001.08")
	require.NotNil(t, model.OriginalCreationDateTime)
	require.Equal(t, model.OriginalInstructionId, "Scenario01InstrId001")
	require.Equal(t, model.OriginalEndToEndId, "Scenario01EtoEId001")
	require.NotNil(t, model.EnhancedTransaction)
	require.Equal(t, model.EnhancedTransaction.OriginalUETR, "8a562c67-ca16-48ba-b074-65581be6f011")
	require.Equal(t, model.ReturnedInterbankSettlementAmount.Amount, 151235.88)
	require.Equal(t, model.ReturnedInterbankSettlementAmount.Currency, "USD")
	require.NotNil(t, model.InterbankSettlementDate)
	require.Equal(t, model.ReturnedInstructedAmount.Amount, 151235.88)
	require.Equal(t, model.ReturnedInstructedAmount.Currency, "USD")
	require.Equal(t, model.ChargeBearer, models.ChargeBearerSLEV)
	require.Equal(t, model.InstructingAgent.PaymentSysCode, models.PaymentSysUSABA)
	require.Equal(t, model.InstructingAgent.PaymentSysMemberId, "021040078")
	require.Equal(t, model.InstructedAgent.PaymentSysCode, models.PaymentSysUSABA)
	require.Equal(t, model.InstructedAgent.PaymentSysMemberId, "011104238")
	require.Equal(t, model.RtrChain.Debtor.Name, "Corporation B")
	require.Equal(t, model.RtrChain.Debtor.Address.StreetName, "Desert View Street")
	require.Equal(t, model.RtrChain.Debtor.Address.BuildingNumber, "1")
	require.Equal(t, model.RtrChain.Debtor.Address.Floor, "33")
	require.Equal(t, model.RtrChain.Debtor.Address.PostalCode, "92262")
	require.Equal(t, model.RtrChain.Debtor.Address.TownName, "Palm Springs")
	require.Equal(t, model.RtrChain.Debtor.Address.Subdivision, "CA")
	require.Equal(t, model.RtrChain.Debtor.Address.Country, "US")
	require.Equal(t, model.RtrChain.DebtorOtherTypeId, "567876543")
	require.Equal(t, model.RtrChain.DebtorAgent.PaymentSysCode, models.PaymentSysUSABA)
	require.Equal(t, model.RtrChain.DebtorAgent.PaymentSysMemberId, "021040078")
	require.Equal(t, model.RtrChain.DebtorAgent.BankName, "BankB")
	require.Equal(t, model.RtrChain.DebtorAgent.PostalAddress.StreetName, "Avenue B")
	require.Equal(t, model.RtrChain.DebtorAgent.PostalAddress.BuildingNumber, "25")
	require.Equal(t, model.RtrChain.DebtorAgent.PostalAddress.PostalCode, "19067")
	require.Equal(t, model.RtrChain.DebtorAgent.PostalAddress.TownName, "Yardley")
	require.Equal(t, model.RtrChain.DebtorAgent.PostalAddress.Subdivision, "PA")
	require.Equal(t, model.RtrChain.DebtorAgent.PostalAddress.Country, "US")
	require.Equal(t, model.RtrChain.CreditorAgent.PaymentSysCode, models.PaymentSysUSABA)
	require.Equal(t, model.RtrChain.CreditorAgent.PaymentSysMemberId, "011104238")
	require.Equal(t, model.RtrChain.CreditorAgent.BankName, "BankA")
	require.Equal(t, model.RtrChain.CreditorAgent.PostalAddress.StreetName, "Avenue A")
	require.Equal(t, model.RtrChain.CreditorAgent.PostalAddress.BuildingNumber, "66")
	require.Equal(t, model.RtrChain.CreditorAgent.PostalAddress.PostalCode, "60532")
	require.Equal(t, model.RtrChain.CreditorAgent.PostalAddress.TownName, "Lisle")
	require.Equal(t, model.RtrChain.CreditorAgent.PostalAddress.Subdivision, "IL")
	require.Equal(t, model.RtrChain.CreditorAgent.PostalAddress.Country, "US")
	require.Equal(t, model.RtrChain.Creditor.Name, "Corporation A")
	require.Equal(t, model.RtrChain.Creditor.Address.StreetName, "Avenue of the Fountains")
	require.Equal(t, model.RtrChain.Creditor.Address.BuildingNumber, "167565")
	require.Equal(t, model.RtrChain.Creditor.Address.RoomNumber, "Suite D110")
	require.Equal(t, model.RtrChain.Creditor.Address.PostalCode, "85268")
	require.Equal(t, model.RtrChain.Creditor.Address.TownName, "Fountain Hills")
	require.Equal(t, model.RtrChain.Creditor.Address.Subdivision, "AZ")
	require.Equal(t, model.RtrChain.Creditor.Address.Country, "US")
	require.Equal(t, model.RtrChain.CreditorAccountOtherTypeId, "5647772655")
	require.Equal(t, model.ReturnReasonInformation.Reason, "DUPL")
	require.Contains(t, model.ReturnReasonInformation.AdditionalInfo, "Order cancelled.")
}
